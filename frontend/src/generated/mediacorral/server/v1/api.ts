// @generated by protobuf-ts 2.11.1 with parameter long_type_bigint
// @generated from protobuf file "mediacorral/server/v1/api.proto" (package "mediacorral.server.v1", syntax proto3)
// tslint:disable
import { DriveState } from "../../drive_controller/v1/main";
import { RipUpdate } from "../../drive_controller/v1/main";
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RipStatus } from "../../drive_controller/v1/main";
import { TmdbMovieResult } from "../../common/tmdb/v1/main";
import { TmdbTvResult } from "../../common/tmdb/v1/main";
import { TmdbAnyTitle } from "../../common/tmdb/v1/main";
/**
 * @generated from protobuf message mediacorral.server.v1.GetSubtitlesRequest
 */
export interface GetSubtitlesRequest {
    /**
     * @generated from protobuf field: string blob_id = 1
     */
    blobId: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetSubtitlesResponse
 */
export interface GetSubtitlesResponse {
    /**
     * @generated from protobuf field: string subtitles = 1
     */
    subtitles: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbMultiRequest
 */
export interface SearchTmdbMultiRequest {
    /**
     * @generated from protobuf field: string query = 1
     */
    query: string;
    /**
     * @generated from protobuf field: optional string language = 2
     */
    language?: string;
    /**
     * @generated from protobuf field: optional uint32 page = 3
     */
    page?: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbMultiResponse
 */
export interface SearchTmdbMultiResponse {
    /**
     * @generated from protobuf field: uint32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: uint32 total_pages = 2
     */
    totalPages: number;
    /**
     * @generated from protobuf field: uint32 total_results = 3
     */
    totalResults: number;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbAnyTitle results = 4
     */
    results: TmdbAnyTitle[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbTvRequest
 */
export interface SearchTmdbTvRequest {
    /**
     * @generated from protobuf field: string query = 1
     */
    query: string;
    /**
     * @generated from protobuf field: optional string first_air_date_year = 2
     */
    firstAirDateYear?: string;
    /**
     * @generated from protobuf field: optional string language = 3
     */
    language?: string;
    /**
     * @generated from protobuf field: optional string year = 4
     */
    year?: string;
    /**
     * @generated from protobuf field: optional uint32 page = 5
     */
    page?: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbTvResponse
 */
export interface SearchTmdbTvResponse {
    /**
     * @generated from protobuf field: uint32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: uint32 total_pages = 2
     */
    totalPages: number;
    /**
     * @generated from protobuf field: uint32 total_results = 3
     */
    totalResults: number;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbTvResult results = 4
     */
    results: TmdbTvResult[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbMovieRequest
 */
export interface SearchTmdbMovieRequest {
    /**
     * @generated from protobuf field: string query = 1
     */
    query: string;
    /**
     * @generated from protobuf field: optional string primary_release_year = 2
     */
    primaryReleaseYear?: string;
    /**
     * @generated from protobuf field: optional string language = 3
     */
    language?: string;
    /**
     * @generated from protobuf field: optional string year = 4
     */
    year?: string;
    /**
     * @generated from protobuf field: optional string region = 5
     */
    region?: string;
    /**
     * @generated from protobuf field: optional uint32 page = 6
     */
    page?: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SearchTmdbMovieResponse
 */
export interface SearchTmdbMovieResponse {
    /**
     * @generated from protobuf field: uint32 page = 1
     */
    page: number;
    /**
     * @generated from protobuf field: uint32 total_pages = 2
     */
    totalPages: number;
    /**
     * @generated from protobuf field: uint32 total_results = 3
     */
    totalResults: number;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbMovieResult results = 4
     */
    results: TmdbMovieResult[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.ImportTmdbTvRequest
 */
export interface ImportTmdbTvRequest {
    /**
     * @generated from protobuf field: int32 tmdb_id = 1
     */
    tmdbId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ImportTmdbTvResponse
 */
export interface ImportTmdbTvResponse {
    /**
     * The internal ID of the tv show in our database
     *
     * @generated from protobuf field: int64 tv_id = 1
     */
    tvId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ImportTmdbMovieRequest
 */
export interface ImportTmdbMovieRequest {
    /**
     * @generated from protobuf field: int32 tmdb_id = 1
     */
    tmdbId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ImportTmdbMovieResponse
 */
export interface ImportTmdbMovieResponse {
    /**
     * The internal ID of the movie in our database
     *
     * @generated from protobuf field: int64 movie_id = 1
     */
    movieId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RebuildExportsDirRequest
 */
export interface RebuildExportsDirRequest {
    /**
     * @generated from protobuf field: string exports_dir = 1
     */
    exportsDir: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RebuildExportsDirResponse
 */
export interface RebuildExportsDirResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.AutoripStatusRequest
 */
export interface AutoripStatusRequest {
    /**
     * If specified, enables or disables the autoripper.
     * If unspecified, queries the current status
     *
     * @generated from protobuf field: mediacorral.server.v1.AutoripStatus status = 1
     */
    status: AutoripStatus;
}
/**
 * @generated from protobuf message mediacorral.server.v1.AutoripStatusResponse
 */
export interface AutoripStatusResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.AutoripStatus status = 1
     */
    status: AutoripStatus;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListDrivesRequest
 */
export interface ListDrivesRequest {
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListDrivesResponse
 */
export interface ListDrivesResponse {
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.DiscDrive drives = 1
     */
    drives: DiscDrive[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.DiscDrive
 */
export interface DiscDrive {
    /**
     * @generated from protobuf field: string controller = 1
     */
    controller: string;
    /**
     * @generated from protobuf field: uint32 drive_id = 2
     */
    driveId: number;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.StartRipJobRequest
 */
export interface StartRipJobRequest {
    /**
     * @generated from protobuf field: mediacorral.server.v1.DiscDrive drive = 1
     */
    drive?: DiscDrive;
    /**
     * @generated from protobuf field: optional string disc_name = 2
     */
    discName?: string;
    /**
     * @generated from protobuf field: optional mediacorral.server.v1.SuspectedContents suspected_contents = 3
     */
    suspectedContents?: SuspectedContents;
    /**
     * @generated from protobuf field: bool autoeject = 4
     */
    autoeject: boolean;
}
/**
 * @generated from protobuf message mediacorral.server.v1.StartRipJobResponse
 */
export interface StartRipJobResponse {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SuspectedContents
 */
export interface SuspectedContents {
    /**
     * @generated from protobuf oneof: suspected_contents
     */
    suspectedContents: {
        oneofKind: "movie";
        /**
         * @generated from protobuf field: mediacorral.server.v1.SuspectedContents.Movie movie = 1
         */
        movie: SuspectedContents_Movie;
    } | {
        oneofKind: "tvEpisodes";
        /**
         * @generated from protobuf field: mediacorral.server.v1.SuspectedContents.TvEpisodes tv_episodes = 2
         */
        tvEpisodes: SuspectedContents_TvEpisodes;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message mediacorral.server.v1.SuspectedContents.Movie
 */
export interface SuspectedContents_Movie {
    /**
     * @generated from protobuf field: int32 tmdb_id = 1
     */
    tmdbId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SuspectedContents.TvEpisodes
 */
export interface SuspectedContents_TvEpisodes {
    /**
     * @generated from protobuf field: repeated int32 episode_tmdb_ids = 1
     */
    episodeTmdbIds: number[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetRipJobStatusRequest
 */
export interface GetRipJobStatusRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetRipJobStatusResponse
 */
export interface GetRipJobStatusResponse {
    /**
     * @generated from protobuf field: mediacorral.drive_controller.v1.RipStatus status = 1
     */
    status?: RipStatus;
}
/**
 * @generated from protobuf message mediacorral.server.v1.StreamRipJobUpdatesRequest
 */
export interface StreamRipJobUpdatesRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.EjectRequest
 */
export interface EjectRequest {
    /**
     * @generated from protobuf field: mediacorral.server.v1.DiscDrive drive = 1
     */
    drive?: DiscDrive;
}
/**
 * @generated from protobuf message mediacorral.server.v1.EjectResponse
 */
export interface EjectResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.RetractRequest
 */
export interface RetractRequest {
    /**
     * @generated from protobuf field: mediacorral.server.v1.DiscDrive drive = 1
     */
    drive?: DiscDrive;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RetractResponse
 */
export interface RetractResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetDriveStateRequest
 */
export interface GetDriveStateRequest {
    /**
     * @generated from protobuf field: string controller_id = 1
     */
    controllerId: string;
    /**
     * @generated from protobuf field: uint32 drive_id = 2
     */
    driveId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListMoviesRequest
 */
export interface ListMoviesRequest {
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListMoviesResponse
 */
export interface ListMoviesResponse {
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.Movie movies = 1
     */
    movies: Movie[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.Movie
 */
export interface Movie {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional int32 tmdb_id = 2
     */
    tmdbId?: number;
    /**
     * @generated from protobuf field: optional int64 poster_blob = 3
     */
    posterBlob?: bigint;
    /**
     * @generated from protobuf field: string title = 4
     */
    title: string;
    /**
     * @generated from protobuf field: optional string release_year = 5
     */
    releaseYear?: string;
    /**
     * @generated from protobuf field: optional string description = 6
     */
    description?: string;
    /**
     * @generated from protobuf field: optional uint32 runtime = 7
     */
    runtime?: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetMovieRequest
 */
export interface GetMovieRequest {
    /**
     * @generated from protobuf field: int64 movie_id = 1
     */
    movieId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetMovieResponse
 */
export interface GetMovieResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.Movie movie = 1
     */
    movie?: Movie;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetMovieByTmdbIdRequest
 */
export interface GetMovieByTmdbIdRequest {
    /**
     * @generated from protobuf field: int32 tmdb_id = 1
     */
    tmdbId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetMovieByTmdbIdResponse
 */
export interface GetMovieByTmdbIdResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.Movie movie = 1
     */
    movie?: Movie;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvShowsRequest
 */
export interface ListTvShowsRequest {
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvShowsResponse
 */
export interface ListTvShowsResponse {
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.TvShow tv_shows = 1
     */
    tvShows: TvShow[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.TvShow
 */
export interface TvShow {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional int32 tmdb_id = 2
     */
    tmdbId?: number;
    /**
     * @generated from protobuf field: optional int64 poster_blob = 3
     */
    posterBlob?: bigint;
    /**
     * @generated from protobuf field: string title = 4
     */
    title: string;
    /**
     * @generated from protobuf field: optional string original_release_year = 5
     */
    originalReleaseYear?: string;
    /**
     * @generated from protobuf field: optional string description = 6
     */
    description?: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvSeasonsRequest
 */
export interface ListTvSeasonsRequest {
    /**
     * @generated from protobuf field: int64 series_id = 1
     */
    seriesId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvSeasonsResponse
 */
export interface ListTvSeasonsResponse {
    /**
     * @generated from protobuf field: int64 series_id = 1
     */
    seriesId: bigint;
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.TvSeason tv_seasons = 2
     */
    tvSeasons: TvSeason[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.TvSeason
 */
export interface TvSeason {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional int32 tmdb_id = 2
     */
    tmdbId?: number;
    /**
     * @generated from protobuf field: int64 tv_show_id = 3
     */
    tvShowId: bigint;
    /**
     * @generated from protobuf field: uint32 season_number = 4
     */
    seasonNumber: number;
    /**
     * @generated from protobuf field: optional int64 poster_blob = 5
     */
    posterBlob?: bigint;
    /**
     * @generated from protobuf field: string title = 6
     */
    title: string;
    /**
     * @generated from protobuf field: optional string description = 7
     */
    description?: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvEpisodesRequest
 */
export interface ListTvEpisodesRequest {
    /**
     * @generated from protobuf field: int64 tv_season_id = 1
     */
    tvSeasonId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.ListTvEpisodesResponse
 */
export interface ListTvEpisodesResponse {
    /**
     * @generated from protobuf field: int64 tv_season_id = 1
     */
    tvSeasonId: bigint;
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.TvEpisode tv_episodes = 2
     */
    tvEpisodes: TvEpisode[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.TvEpisode
 */
export interface TvEpisode {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: optional int32 tmdb_id = 2
     */
    tmdbId?: number;
    /**
     * @generated from protobuf field: int64 tv_show_id = 3
     */
    tvShowId: bigint;
    /**
     * @generated from protobuf field: int64 tv_season_id = 4
     */
    tvSeasonId: bigint;
    /**
     * @generated from protobuf field: uint32 episode_number = 5
     */
    episodeNumber: number;
    /**
     * @generated from protobuf field: optional int64 thumbnail_blob = 6
     */
    thumbnailBlob?: bigint;
    /**
     * @generated from protobuf field: string title = 7
     */
    title: string;
    /**
     * @generated from protobuf field: optional string description = 8
     */
    description?: string;
    /**
     * @generated from protobuf field: optional uint32 runtime = 9
     */
    runtime?: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvShowRequest
 */
export interface GetTvShowRequest {
    /**
     * @generated from protobuf field: int64 show_id = 1
     */
    showId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvShowResponse
 */
export interface GetTvShowResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.TvShow tv_show = 1
     */
    tvShow?: TvShow;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvSeasonRequest
 */
export interface GetTvSeasonRequest {
    /**
     * @generated from protobuf field: int64 season_id = 1
     */
    seasonId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvSeasonResponse
 */
export interface GetTvSeasonResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.TvSeason tv_season = 1
     */
    tvSeason?: TvSeason;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvEpisodeRequest
 */
export interface GetTvEpisodeRequest {
    /**
     * @generated from protobuf field: int64 episode_id = 1
     */
    episodeId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvEpisodeResponse
 */
export interface GetTvEpisodeResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.TvEpisode episode = 1
     */
    episode?: TvEpisode;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvEpisodeByTmdbIdRequest
 */
export interface GetTvEpisodeByTmdbIdRequest {
    /**
     * @generated from protobuf field: int32 tmdb_id = 1
     */
    tmdbId: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetTvEpisodeByTmdbIdResponse
 */
export interface GetTvEpisodeByTmdbIdResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.TvEpisode episode = 1
     */
    episode?: TvEpisode;
}
/**
 * @generated from protobuf message mediacorral.server.v1.TagFileRequest
 */
export interface TagFileRequest {
    /**
     * @generated from protobuf field: int64 file = 1
     */
    file: bigint;
    /**
     * @generated from protobuf field: mediacorral.server.v1.VideoType video_type = 2
     */
    videoType: VideoType;
    /**
     * @generated from protobuf field: optional int64 match_id = 3
     */
    matchId?: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.TagFileResponse
 */
export interface TagFileResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetJobInfoRequest
 */
export interface GetJobInfoRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetJobInfoResponse
 */
export interface GetJobInfoResponse {
    /**
     * @generated from protobuf field: mediacorral.server.v1.RipJob details = 1
     */
    details?: RipJob;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RenameJobRequest
 */
export interface RenameJobRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
    /**
     * @generated from protobuf field: string new_name = 2
     */
    newName: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RenameJobResponse
 */
export interface RenameJobResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.SuspectJobRequest
 */
export interface SuspectJobRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
    /**
     * @generated from protobuf field: mediacorral.server.v1.SuspectedContents suspicion = 2
     */
    suspicion?: SuspectedContents;
}
/**
 * @generated from protobuf message mediacorral.server.v1.SuspectJobResponse
 */
export interface SuspectJobResponse {
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetUntaggedJobsRequest
 */
export interface GetUntaggedJobsRequest {
    /**
     * @generated from protobuf field: uint32 skip = 1
     */
    skip: number;
    /**
     * @generated from protobuf field: uint32 limit = 2
     */
    limit: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetUntaggedJobsResponse
 */
export interface GetUntaggedJobsResponse {
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.RipJob rip_jobs = 1
     */
    ripJobs: RipJob[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.RipJob
 */
export interface RipJob {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 2
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: optional string disc_title = 3
     */
    discTitle?: string;
    /**
     * @generated from protobuf field: optional mediacorral.server.v1.SuspectedContents suspected_contents = 4
     */
    suspectedContents?: SuspectedContents;
    /**
     * @generated from protobuf field: bool rip_finished = 5
     */
    ripFinished: boolean;
    /**
     * @generated from protobuf field: bool imported = 6
     */
    imported: boolean;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetJobCatalogueInfoRequest
 */
export interface GetJobCatalogueInfoRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.GetJobCatalogueInfoResponse
 */
export interface GetJobCatalogueInfoResponse {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 start_time = 2
     */
    startTime: bigint;
    /**
     * @generated from protobuf field: optional string disc_title = 3
     */
    discTitle?: string;
    /**
     * @generated from protobuf field: optional mediacorral.server.v1.SuspectedContents suspected_contents = 4
     */
    suspectedContents?: SuspectedContents;
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.VideoFile video_files = 5
     */
    videoFiles: VideoFile[];
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.MatchInfoItem matches = 6
     */
    matches: MatchInfoItem[];
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.RipVideoBlobs subtitle_maps = 7
     */
    subtitleMaps: RipVideoBlobs[];
    /**
     * @generated from protobuf field: repeated mediacorral.server.v1.OstDownloadsItem ost_subtitle_files = 8
     */
    ostSubtitleFiles: OstDownloadsItem[];
}
/**
 * @generated from protobuf message mediacorral.server.v1.VideoFile
 */
export interface VideoFile {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: mediacorral.server.v1.VideoType video_type = 2
     */
    videoType: VideoType;
    /**
     *  Match ID: Identifies the specific movie, special feature, etc this video contains.
     *
     * @generated from protobuf field: optional int64 match_id = 3
     */
    matchId?: bigint;
    /**
     * @generated from protobuf field: string blob_id = 4
     */
    blobId: string;
    /**
     * @generated from protobuf field: optional uint32 resolution_width = 5
     */
    resolutionWidth?: number;
    /**
     * @generated from protobuf field: optional uint32 resolution_height = 6
     */
    resolutionHeight?: number;
    /**
     * @generated from protobuf field: optional uint32 length = 7
     */
    length?: number;
    /**
     * @generated from protobuf field: optional bytes original_video_hash = 8
     */
    originalVideoHash?: Uint8Array;
    /**
     * @generated from protobuf field: optional int64 rip_job = 9
     */
    ripJob?: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.MatchInfoItem
 */
export interface MatchInfoItem {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 video_file_id = 2
     */
    videoFileId: bigint;
    /**
     * @generated from protobuf field: int64 ost_download_id = 3
     */
    ostDownloadId: bigint;
    /**
     * @generated from protobuf field: uint32 distance = 4
     */
    distance: number;
    /**
     * @generated from protobuf field: uint32 max_distance = 5
     */
    maxDistance: number;
}
/**
 * @generated from protobuf message mediacorral.server.v1.RipVideoBlobs
 */
export interface RipVideoBlobs {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: int64 job_id = 2
     */
    jobId: bigint;
    /**
     * @generated from protobuf field: string video_blob = 3
     */
    videoBlob: string;
    /**
     * @generated from protobuf field: optional string subtitle_blob = 4
     */
    subtitleBlob?: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.OstDownloadsItem
 */
export interface OstDownloadsItem {
    /**
     * @generated from protobuf field: int64 id = 1
     */
    id: bigint;
    /**
     * @generated from protobuf field: mediacorral.server.v1.VideoType video_type = 2
     */
    videoType: VideoType;
    /**
     * @generated from protobuf field: int64 match_id = 3
     */
    matchId: bigint;
    /**
     * @generated from protobuf field: string filename = 4
     */
    filename: string;
    /**
     * @generated from protobuf field: string blob_id = 5
     */
    blobId: string;
}
/**
 * @generated from protobuf message mediacorral.server.v1.PruneRipJobRequest
 */
export interface PruneRipJobRequest {
    /**
     * @generated from protobuf field: int64 job_id = 1
     */
    jobId: bigint;
}
/**
 * @generated from protobuf message mediacorral.server.v1.PruneRipJobResponse
 */
export interface PruneRipJobResponse {
}
/**
 * @generated from protobuf enum mediacorral.server.v1.AutoripStatus
 */
export enum AutoripStatus {
    /**
     * @generated from protobuf enum value: AUTORIP_STATUS_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: AUTORIP_STATUS_ENABLED = 1;
     */
    ENABLED = 1,
    /**
     * @generated from protobuf enum value: AUTORIP_STATUS_DISABLED = 2;
     */
    DISABLED = 2
}
/**
 * @generated from protobuf enum mediacorral.server.v1.VideoType
 */
export enum VideoType {
    /**
     * @generated from protobuf enum value: VIDEO_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: VIDEO_TYPE_MOVIE = 1;
     */
    MOVIE = 1,
    /**
     * @generated from protobuf enum value: VIDEO_TYPE_SPECIAL_FEATURE = 2;
     */
    SPECIAL_FEATURE = 2,
    /**
     * @generated from protobuf enum value: VIDEO_TYPE_TV_EPISODE = 3;
     */
    TV_EPISODE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetSubtitlesRequest$Type extends MessageType<GetSubtitlesRequest> {
    constructor() {
        super("mediacorral.server.v1.GetSubtitlesRequest", [
            { no: 1, name: "blob_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubtitlesRequest>): GetSubtitlesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.blobId = "";
        if (value !== undefined)
            reflectionMergePartial<GetSubtitlesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubtitlesRequest): GetSubtitlesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string blob_id */ 1:
                    message.blobId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubtitlesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string blob_id = 1; */
        if (message.blobId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.blobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetSubtitlesRequest
 */
export const GetSubtitlesRequest = new GetSubtitlesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetSubtitlesResponse$Type extends MessageType<GetSubtitlesResponse> {
    constructor() {
        super("mediacorral.server.v1.GetSubtitlesResponse", [
            { no: 1, name: "subtitles", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetSubtitlesResponse>): GetSubtitlesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.subtitles = "";
        if (value !== undefined)
            reflectionMergePartial<GetSubtitlesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetSubtitlesResponse): GetSubtitlesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string subtitles */ 1:
                    message.subtitles = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetSubtitlesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string subtitles = 1; */
        if (message.subtitles !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.subtitles);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetSubtitlesResponse
 */
export const GetSubtitlesResponse = new GetSubtitlesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbMultiRequest$Type extends MessageType<SearchTmdbMultiRequest> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbMultiRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbMultiRequest>): SearchTmdbMultiRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbMultiRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbMultiRequest): SearchTmdbMultiRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* optional string language */ 2:
                    message.language = reader.string();
                    break;
                case /* optional uint32 page */ 3:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbMultiRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* optional string language = 2; */
        if (message.language !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.language);
        /* optional uint32 page = 3; */
        if (message.page !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbMultiRequest
 */
export const SearchTmdbMultiRequest = new SearchTmdbMultiRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbMultiResponse$Type extends MessageType<SearchTmdbMultiResponse> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbMultiResponse", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "total_pages", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "total_results", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbAnyTitle }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbMultiResponse>): SearchTmdbMultiResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.totalPages = 0;
        message.totalResults = 0;
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbMultiResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbMultiResponse): SearchTmdbMultiResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* uint32 total_pages */ 2:
                    message.totalPages = reader.uint32();
                    break;
                case /* uint32 total_results */ 3:
                    message.totalResults = reader.uint32();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbAnyTitle results */ 4:
                    message.results.push(TmdbAnyTitle.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbMultiResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* uint32 total_pages = 2; */
        if (message.totalPages !== 0)
            writer.tag(2, WireType.Varint).uint32(message.totalPages);
        /* uint32 total_results = 3; */
        if (message.totalResults !== 0)
            writer.tag(3, WireType.Varint).uint32(message.totalResults);
        /* repeated mediacorral.common.tmdb.v1.TmdbAnyTitle results = 4; */
        for (let i = 0; i < message.results.length; i++)
            TmdbAnyTitle.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbMultiResponse
 */
export const SearchTmdbMultiResponse = new SearchTmdbMultiResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbTvRequest$Type extends MessageType<SearchTmdbTvRequest> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbTvRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "first_air_date_year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbTvRequest>): SearchTmdbTvRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbTvRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbTvRequest): SearchTmdbTvRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* optional string first_air_date_year */ 2:
                    message.firstAirDateYear = reader.string();
                    break;
                case /* optional string language */ 3:
                    message.language = reader.string();
                    break;
                case /* optional string year */ 4:
                    message.year = reader.string();
                    break;
                case /* optional uint32 page */ 5:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbTvRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* optional string first_air_date_year = 2; */
        if (message.firstAirDateYear !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.firstAirDateYear);
        /* optional string language = 3; */
        if (message.language !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* optional string year = 4; */
        if (message.year !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.year);
        /* optional uint32 page = 5; */
        if (message.page !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbTvRequest
 */
export const SearchTmdbTvRequest = new SearchTmdbTvRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbTvResponse$Type extends MessageType<SearchTmdbTvResponse> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbTvResponse", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "total_pages", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "total_results", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbTvResult }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbTvResponse>): SearchTmdbTvResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.totalPages = 0;
        message.totalResults = 0;
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbTvResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbTvResponse): SearchTmdbTvResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* uint32 total_pages */ 2:
                    message.totalPages = reader.uint32();
                    break;
                case /* uint32 total_results */ 3:
                    message.totalResults = reader.uint32();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbTvResult results */ 4:
                    message.results.push(TmdbTvResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbTvResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* uint32 total_pages = 2; */
        if (message.totalPages !== 0)
            writer.tag(2, WireType.Varint).uint32(message.totalPages);
        /* uint32 total_results = 3; */
        if (message.totalResults !== 0)
            writer.tag(3, WireType.Varint).uint32(message.totalResults);
        /* repeated mediacorral.common.tmdb.v1.TmdbTvResult results = 4; */
        for (let i = 0; i < message.results.length; i++)
            TmdbTvResult.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbTvResponse
 */
export const SearchTmdbTvResponse = new SearchTmdbTvResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbMovieRequest$Type extends MessageType<SearchTmdbMovieRequest> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbMovieRequest", [
            { no: 1, name: "query", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "primary_release_year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "region", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "page", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbMovieRequest>): SearchTmdbMovieRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.query = "";
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbMovieRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbMovieRequest): SearchTmdbMovieRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string query */ 1:
                    message.query = reader.string();
                    break;
                case /* optional string primary_release_year */ 2:
                    message.primaryReleaseYear = reader.string();
                    break;
                case /* optional string language */ 3:
                    message.language = reader.string();
                    break;
                case /* optional string year */ 4:
                    message.year = reader.string();
                    break;
                case /* optional string region */ 5:
                    message.region = reader.string();
                    break;
                case /* optional uint32 page */ 6:
                    message.page = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbMovieRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string query = 1; */
        if (message.query !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.query);
        /* optional string primary_release_year = 2; */
        if (message.primaryReleaseYear !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.primaryReleaseYear);
        /* optional string language = 3; */
        if (message.language !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* optional string year = 4; */
        if (message.year !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.year);
        /* optional string region = 5; */
        if (message.region !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.region);
        /* optional uint32 page = 6; */
        if (message.page !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbMovieRequest
 */
export const SearchTmdbMovieRequest = new SearchTmdbMovieRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchTmdbMovieResponse$Type extends MessageType<SearchTmdbMovieResponse> {
    constructor() {
        super("mediacorral.server.v1.SearchTmdbMovieResponse", [
            { no: 1, name: "page", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "total_pages", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "total_results", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "results", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbMovieResult }
        ]);
    }
    create(value?: PartialMessage<SearchTmdbMovieResponse>): SearchTmdbMovieResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.page = 0;
        message.totalPages = 0;
        message.totalResults = 0;
        message.results = [];
        if (value !== undefined)
            reflectionMergePartial<SearchTmdbMovieResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchTmdbMovieResponse): SearchTmdbMovieResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 page */ 1:
                    message.page = reader.uint32();
                    break;
                case /* uint32 total_pages */ 2:
                    message.totalPages = reader.uint32();
                    break;
                case /* uint32 total_results */ 3:
                    message.totalResults = reader.uint32();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbMovieResult results */ 4:
                    message.results.push(TmdbMovieResult.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchTmdbMovieResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 page = 1; */
        if (message.page !== 0)
            writer.tag(1, WireType.Varint).uint32(message.page);
        /* uint32 total_pages = 2; */
        if (message.totalPages !== 0)
            writer.tag(2, WireType.Varint).uint32(message.totalPages);
        /* uint32 total_results = 3; */
        if (message.totalResults !== 0)
            writer.tag(3, WireType.Varint).uint32(message.totalResults);
        /* repeated mediacorral.common.tmdb.v1.TmdbMovieResult results = 4; */
        for (let i = 0; i < message.results.length; i++)
            TmdbMovieResult.internalBinaryWrite(message.results[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SearchTmdbMovieResponse
 */
export const SearchTmdbMovieResponse = new SearchTmdbMovieResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportTmdbTvRequest$Type extends MessageType<ImportTmdbTvRequest> {
    constructor() {
        super("mediacorral.server.v1.ImportTmdbTvRequest", [
            { no: 1, name: "tmdb_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ImportTmdbTvRequest>): ImportTmdbTvRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tmdbId = 0;
        if (value !== undefined)
            reflectionMergePartial<ImportTmdbTvRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportTmdbTvRequest): ImportTmdbTvRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tmdb_id */ 1:
                    message.tmdbId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportTmdbTvRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tmdb_id = 1; */
        if (message.tmdbId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tmdbId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ImportTmdbTvRequest
 */
export const ImportTmdbTvRequest = new ImportTmdbTvRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportTmdbTvResponse$Type extends MessageType<ImportTmdbTvResponse> {
    constructor() {
        super("mediacorral.server.v1.ImportTmdbTvResponse", [
            { no: 1, name: "tv_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ImportTmdbTvResponse>): ImportTmdbTvResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tvId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ImportTmdbTvResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportTmdbTvResponse): ImportTmdbTvResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tv_id */ 1:
                    message.tvId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportTmdbTvResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tv_id = 1; */
        if (message.tvId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tvId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ImportTmdbTvResponse
 */
export const ImportTmdbTvResponse = new ImportTmdbTvResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportTmdbMovieRequest$Type extends MessageType<ImportTmdbMovieRequest> {
    constructor() {
        super("mediacorral.server.v1.ImportTmdbMovieRequest", [
            { no: 1, name: "tmdb_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ImportTmdbMovieRequest>): ImportTmdbMovieRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tmdbId = 0;
        if (value !== undefined)
            reflectionMergePartial<ImportTmdbMovieRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportTmdbMovieRequest): ImportTmdbMovieRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tmdb_id */ 1:
                    message.tmdbId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportTmdbMovieRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tmdb_id = 1; */
        if (message.tmdbId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tmdbId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ImportTmdbMovieRequest
 */
export const ImportTmdbMovieRequest = new ImportTmdbMovieRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImportTmdbMovieResponse$Type extends MessageType<ImportTmdbMovieResponse> {
    constructor() {
        super("mediacorral.server.v1.ImportTmdbMovieResponse", [
            { no: 1, name: "movie_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ImportTmdbMovieResponse>): ImportTmdbMovieResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.movieId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ImportTmdbMovieResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImportTmdbMovieResponse): ImportTmdbMovieResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 movie_id */ 1:
                    message.movieId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImportTmdbMovieResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 movie_id = 1; */
        if (message.movieId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.movieId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ImportTmdbMovieResponse
 */
export const ImportTmdbMovieResponse = new ImportTmdbMovieResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebuildExportsDirRequest$Type extends MessageType<RebuildExportsDirRequest> {
    constructor() {
        super("mediacorral.server.v1.RebuildExportsDirRequest", [
            { no: 1, name: "exports_dir", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RebuildExportsDirRequest>): RebuildExportsDirRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.exportsDir = "";
        if (value !== undefined)
            reflectionMergePartial<RebuildExportsDirRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebuildExportsDirRequest): RebuildExportsDirRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string exports_dir */ 1:
                    message.exportsDir = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RebuildExportsDirRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string exports_dir = 1; */
        if (message.exportsDir !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.exportsDir);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RebuildExportsDirRequest
 */
export const RebuildExportsDirRequest = new RebuildExportsDirRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RebuildExportsDirResponse$Type extends MessageType<RebuildExportsDirResponse> {
    constructor() {
        super("mediacorral.server.v1.RebuildExportsDirResponse", []);
    }
    create(value?: PartialMessage<RebuildExportsDirResponse>): RebuildExportsDirResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RebuildExportsDirResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RebuildExportsDirResponse): RebuildExportsDirResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RebuildExportsDirResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RebuildExportsDirResponse
 */
export const RebuildExportsDirResponse = new RebuildExportsDirResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoripStatusRequest$Type extends MessageType<AutoripStatusRequest> {
    constructor() {
        super("mediacorral.server.v1.AutoripStatusRequest", [
            { no: 1, name: "status", kind: "enum", T: () => ["mediacorral.server.v1.AutoripStatus", AutoripStatus, "AUTORIP_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<AutoripStatusRequest>): AutoripStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<AutoripStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoripStatusRequest): AutoripStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.AutoripStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutoripStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.AutoripStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.AutoripStatusRequest
 */
export const AutoripStatusRequest = new AutoripStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutoripStatusResponse$Type extends MessageType<AutoripStatusResponse> {
    constructor() {
        super("mediacorral.server.v1.AutoripStatusResponse", [
            { no: 1, name: "status", kind: "enum", T: () => ["mediacorral.server.v1.AutoripStatus", AutoripStatus, "AUTORIP_STATUS_"] }
        ]);
    }
    create(value?: PartialMessage<AutoripStatusResponse>): AutoripStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        if (value !== undefined)
            reflectionMergePartial<AutoripStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutoripStatusResponse): AutoripStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.AutoripStatus status */ 1:
                    message.status = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutoripStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.AutoripStatus status = 1; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.AutoripStatusResponse
 */
export const AutoripStatusResponse = new AutoripStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDrivesRequest$Type extends MessageType<ListDrivesRequest> {
    constructor() {
        super("mediacorral.server.v1.ListDrivesRequest", []);
    }
    create(value?: PartialMessage<ListDrivesRequest>): ListDrivesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListDrivesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDrivesRequest): ListDrivesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDrivesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListDrivesRequest
 */
export const ListDrivesRequest = new ListDrivesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListDrivesResponse$Type extends MessageType<ListDrivesResponse> {
    constructor() {
        super("mediacorral.server.v1.ListDrivesResponse", [
            { no: 1, name: "drives", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DiscDrive }
        ]);
    }
    create(value?: PartialMessage<ListDrivesResponse>): ListDrivesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.drives = [];
        if (value !== undefined)
            reflectionMergePartial<ListDrivesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListDrivesResponse): ListDrivesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mediacorral.server.v1.DiscDrive drives */ 1:
                    message.drives.push(DiscDrive.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListDrivesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mediacorral.server.v1.DiscDrive drives = 1; */
        for (let i = 0; i < message.drives.length; i++)
            DiscDrive.internalBinaryWrite(message.drives[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListDrivesResponse
 */
export const ListDrivesResponse = new ListDrivesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DiscDrive$Type extends MessageType<DiscDrive> {
    constructor() {
        super("mediacorral.server.v1.DiscDrive", [
            { no: 1, name: "controller", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "drive_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DiscDrive>): DiscDrive {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controller = "";
        message.driveId = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<DiscDrive>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DiscDrive): DiscDrive {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller */ 1:
                    message.controller = reader.string();
                    break;
                case /* uint32 drive_id */ 2:
                    message.driveId = reader.uint32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DiscDrive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller = 1; */
        if (message.controller !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controller);
        /* uint32 drive_id = 2; */
        if (message.driveId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.driveId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.DiscDrive
 */
export const DiscDrive = new DiscDrive$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRipJobRequest$Type extends MessageType<StartRipJobRequest> {
    constructor() {
        super("mediacorral.server.v1.StartRipJobRequest", [
            { no: 1, name: "drive", kind: "message", T: () => DiscDrive },
            { no: 2, name: "disc_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "suspected_contents", kind: "message", T: () => SuspectedContents },
            { no: 4, name: "autoeject", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StartRipJobRequest>): StartRipJobRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.autoeject = false;
        if (value !== undefined)
            reflectionMergePartial<StartRipJobRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRipJobRequest): StartRipJobRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.DiscDrive drive */ 1:
                    message.drive = DiscDrive.internalBinaryRead(reader, reader.uint32(), options, message.drive);
                    break;
                case /* optional string disc_name */ 2:
                    message.discName = reader.string();
                    break;
                case /* optional mediacorral.server.v1.SuspectedContents suspected_contents */ 3:
                    message.suspectedContents = SuspectedContents.internalBinaryRead(reader, reader.uint32(), options, message.suspectedContents);
                    break;
                case /* bool autoeject */ 4:
                    message.autoeject = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRipJobRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.DiscDrive drive = 1; */
        if (message.drive)
            DiscDrive.internalBinaryWrite(message.drive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional string disc_name = 2; */
        if (message.discName !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.discName);
        /* optional mediacorral.server.v1.SuspectedContents suspected_contents = 3; */
        if (message.suspectedContents)
            SuspectedContents.internalBinaryWrite(message.suspectedContents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* bool autoeject = 4; */
        if (message.autoeject !== false)
            writer.tag(4, WireType.Varint).bool(message.autoeject);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.StartRipJobRequest
 */
export const StartRipJobRequest = new StartRipJobRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRipJobResponse$Type extends MessageType<StartRipJobResponse> {
    constructor() {
        super("mediacorral.server.v1.StartRipJobResponse", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StartRipJobResponse>): StartRipJobResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<StartRipJobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartRipJobResponse): StartRipJobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StartRipJobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.StartRipJobResponse
 */
export const StartRipJobResponse = new StartRipJobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuspectedContents$Type extends MessageType<SuspectedContents> {
    constructor() {
        super("mediacorral.server.v1.SuspectedContents", [
            { no: 1, name: "movie", kind: "message", oneof: "suspectedContents", T: () => SuspectedContents_Movie },
            { no: 2, name: "tv_episodes", kind: "message", oneof: "suspectedContents", T: () => SuspectedContents_TvEpisodes }
        ]);
    }
    create(value?: PartialMessage<SuspectedContents>): SuspectedContents {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.suspectedContents = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<SuspectedContents>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuspectedContents): SuspectedContents {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.SuspectedContents.Movie movie */ 1:
                    message.suspectedContents = {
                        oneofKind: "movie",
                        movie: SuspectedContents_Movie.internalBinaryRead(reader, reader.uint32(), options, (message.suspectedContents as any).movie)
                    };
                    break;
                case /* mediacorral.server.v1.SuspectedContents.TvEpisodes tv_episodes */ 2:
                    message.suspectedContents = {
                        oneofKind: "tvEpisodes",
                        tvEpisodes: SuspectedContents_TvEpisodes.internalBinaryRead(reader, reader.uint32(), options, (message.suspectedContents as any).tvEpisodes)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuspectedContents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.SuspectedContents.Movie movie = 1; */
        if (message.suspectedContents.oneofKind === "movie")
            SuspectedContents_Movie.internalBinaryWrite(message.suspectedContents.movie, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* mediacorral.server.v1.SuspectedContents.TvEpisodes tv_episodes = 2; */
        if (message.suspectedContents.oneofKind === "tvEpisodes")
            SuspectedContents_TvEpisodes.internalBinaryWrite(message.suspectedContents.tvEpisodes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SuspectedContents
 */
export const SuspectedContents = new SuspectedContents$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuspectedContents_Movie$Type extends MessageType<SuspectedContents_Movie> {
    constructor() {
        super("mediacorral.server.v1.SuspectedContents.Movie", [
            { no: 1, name: "tmdb_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SuspectedContents_Movie>): SuspectedContents_Movie {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tmdbId = 0;
        if (value !== undefined)
            reflectionMergePartial<SuspectedContents_Movie>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuspectedContents_Movie): SuspectedContents_Movie {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tmdb_id */ 1:
                    message.tmdbId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuspectedContents_Movie, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tmdb_id = 1; */
        if (message.tmdbId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tmdbId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SuspectedContents.Movie
 */
export const SuspectedContents_Movie = new SuspectedContents_Movie$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuspectedContents_TvEpisodes$Type extends MessageType<SuspectedContents_TvEpisodes> {
    constructor() {
        super("mediacorral.server.v1.SuspectedContents.TvEpisodes", [
            { no: 1, name: "episode_tmdb_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SuspectedContents_TvEpisodes>): SuspectedContents_TvEpisodes {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.episodeTmdbIds = [];
        if (value !== undefined)
            reflectionMergePartial<SuspectedContents_TvEpisodes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuspectedContents_TvEpisodes): SuspectedContents_TvEpisodes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 episode_tmdb_ids */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.episodeTmdbIds.push(reader.int32());
                    else
                        message.episodeTmdbIds.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuspectedContents_TvEpisodes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 episode_tmdb_ids = 1; */
        if (message.episodeTmdbIds.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.episodeTmdbIds.length; i++)
                writer.int32(message.episodeTmdbIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SuspectedContents.TvEpisodes
 */
export const SuspectedContents_TvEpisodes = new SuspectedContents_TvEpisodes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRipJobStatusRequest$Type extends MessageType<GetRipJobStatusRequest> {
    constructor() {
        super("mediacorral.server.v1.GetRipJobStatusRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetRipJobStatusRequest>): GetRipJobStatusRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetRipJobStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRipJobStatusRequest): GetRipJobStatusRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRipJobStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetRipJobStatusRequest
 */
export const GetRipJobStatusRequest = new GetRipJobStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRipJobStatusResponse$Type extends MessageType<GetRipJobStatusResponse> {
    constructor() {
        super("mediacorral.server.v1.GetRipJobStatusResponse", [
            { no: 1, name: "status", kind: "message", T: () => RipStatus }
        ]);
    }
    create(value?: PartialMessage<GetRipJobStatusResponse>): GetRipJobStatusResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetRipJobStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRipJobStatusResponse): GetRipJobStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.drive_controller.v1.RipStatus status */ 1:
                    message.status = RipStatus.internalBinaryRead(reader, reader.uint32(), options, message.status);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRipJobStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.drive_controller.v1.RipStatus status = 1; */
        if (message.status)
            RipStatus.internalBinaryWrite(message.status, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetRipJobStatusResponse
 */
export const GetRipJobStatusResponse = new GetRipJobStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamRipJobUpdatesRequest$Type extends MessageType<StreamRipJobUpdatesRequest> {
    constructor() {
        super("mediacorral.server.v1.StreamRipJobUpdatesRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<StreamRipJobUpdatesRequest>): StreamRipJobUpdatesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<StreamRipJobUpdatesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamRipJobUpdatesRequest): StreamRipJobUpdatesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamRipJobUpdatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.StreamRipJobUpdatesRequest
 */
export const StreamRipJobUpdatesRequest = new StreamRipJobUpdatesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EjectRequest$Type extends MessageType<EjectRequest> {
    constructor() {
        super("mediacorral.server.v1.EjectRequest", [
            { no: 1, name: "drive", kind: "message", T: () => DiscDrive }
        ]);
    }
    create(value?: PartialMessage<EjectRequest>): EjectRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EjectRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EjectRequest): EjectRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.DiscDrive drive */ 1:
                    message.drive = DiscDrive.internalBinaryRead(reader, reader.uint32(), options, message.drive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EjectRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.DiscDrive drive = 1; */
        if (message.drive)
            DiscDrive.internalBinaryWrite(message.drive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.EjectRequest
 */
export const EjectRequest = new EjectRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EjectResponse$Type extends MessageType<EjectResponse> {
    constructor() {
        super("mediacorral.server.v1.EjectResponse", []);
    }
    create(value?: PartialMessage<EjectResponse>): EjectResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<EjectResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EjectResponse): EjectResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EjectResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.EjectResponse
 */
export const EjectResponse = new EjectResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetractRequest$Type extends MessageType<RetractRequest> {
    constructor() {
        super("mediacorral.server.v1.RetractRequest", [
            { no: 1, name: "drive", kind: "message", T: () => DiscDrive }
        ]);
    }
    create(value?: PartialMessage<RetractRequest>): RetractRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetractRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetractRequest): RetractRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.DiscDrive drive */ 1:
                    message.drive = DiscDrive.internalBinaryRead(reader, reader.uint32(), options, message.drive);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetractRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.DiscDrive drive = 1; */
        if (message.drive)
            DiscDrive.internalBinaryWrite(message.drive, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RetractRequest
 */
export const RetractRequest = new RetractRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetractResponse$Type extends MessageType<RetractResponse> {
    constructor() {
        super("mediacorral.server.v1.RetractResponse", []);
    }
    create(value?: PartialMessage<RetractResponse>): RetractResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RetractResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetractResponse): RetractResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RetractResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RetractResponse
 */
export const RetractResponse = new RetractResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDriveStateRequest$Type extends MessageType<GetDriveStateRequest> {
    constructor() {
        super("mediacorral.server.v1.GetDriveStateRequest", [
            { no: 1, name: "controller_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "drive_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDriveStateRequest>): GetDriveStateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.controllerId = "";
        message.driveId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetDriveStateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDriveStateRequest): GetDriveStateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string controller_id */ 1:
                    message.controllerId = reader.string();
                    break;
                case /* uint32 drive_id */ 2:
                    message.driveId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDriveStateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string controller_id = 1; */
        if (message.controllerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.controllerId);
        /* uint32 drive_id = 2; */
        if (message.driveId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.driveId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetDriveStateRequest
 */
export const GetDriveStateRequest = new GetDriveStateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMoviesRequest$Type extends MessageType<ListMoviesRequest> {
    constructor() {
        super("mediacorral.server.v1.ListMoviesRequest", []);
    }
    create(value?: PartialMessage<ListMoviesRequest>): ListMoviesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListMoviesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMoviesRequest): ListMoviesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMoviesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListMoviesRequest
 */
export const ListMoviesRequest = new ListMoviesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListMoviesResponse$Type extends MessageType<ListMoviesResponse> {
    constructor() {
        super("mediacorral.server.v1.ListMoviesResponse", [
            { no: 1, name: "movies", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Movie }
        ]);
    }
    create(value?: PartialMessage<ListMoviesResponse>): ListMoviesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.movies = [];
        if (value !== undefined)
            reflectionMergePartial<ListMoviesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListMoviesResponse): ListMoviesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mediacorral.server.v1.Movie movies */ 1:
                    message.movies.push(Movie.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListMoviesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mediacorral.server.v1.Movie movies = 1; */
        for (let i = 0; i < message.movies.length; i++)
            Movie.internalBinaryWrite(message.movies[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListMoviesResponse
 */
export const ListMoviesResponse = new ListMoviesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Movie$Type extends MessageType<Movie> {
    constructor() {
        super("mediacorral.server.v1.Movie", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tmdb_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "poster_blob", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "release_year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "runtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Movie>): Movie {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<Movie>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Movie): Movie {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional int32 tmdb_id */ 2:
                    message.tmdbId = reader.int32();
                    break;
                case /* optional int64 poster_blob */ 3:
                    message.posterBlob = reader.int64().toBigInt();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* optional string release_year */ 5:
                    message.releaseYear = reader.string();
                    break;
                case /* optional string description */ 6:
                    message.description = reader.string();
                    break;
                case /* optional uint32 runtime */ 7:
                    message.runtime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Movie, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional int32 tmdb_id = 2; */
        if (message.tmdbId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tmdbId);
        /* optional int64 poster_blob = 3; */
        if (message.posterBlob !== undefined)
            writer.tag(3, WireType.Varint).int64(message.posterBlob);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* optional string release_year = 5; */
        if (message.releaseYear !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.releaseYear);
        /* optional string description = 6; */
        if (message.description !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* optional uint32 runtime = 7; */
        if (message.runtime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.runtime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.Movie
 */
export const Movie = new Movie$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMovieRequest$Type extends MessageType<GetMovieRequest> {
    constructor() {
        super("mediacorral.server.v1.GetMovieRequest", [
            { no: 1, name: "movie_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetMovieRequest>): GetMovieRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.movieId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetMovieRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMovieRequest): GetMovieRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 movie_id */ 1:
                    message.movieId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMovieRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 movie_id = 1; */
        if (message.movieId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.movieId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetMovieRequest
 */
export const GetMovieRequest = new GetMovieRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMovieResponse$Type extends MessageType<GetMovieResponse> {
    constructor() {
        super("mediacorral.server.v1.GetMovieResponse", [
            { no: 1, name: "movie", kind: "message", T: () => Movie }
        ]);
    }
    create(value?: PartialMessage<GetMovieResponse>): GetMovieResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMovieResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMovieResponse): GetMovieResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.Movie movie */ 1:
                    message.movie = Movie.internalBinaryRead(reader, reader.uint32(), options, message.movie);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMovieResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.Movie movie = 1; */
        if (message.movie)
            Movie.internalBinaryWrite(message.movie, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetMovieResponse
 */
export const GetMovieResponse = new GetMovieResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMovieByTmdbIdRequest$Type extends MessageType<GetMovieByTmdbIdRequest> {
    constructor() {
        super("mediacorral.server.v1.GetMovieByTmdbIdRequest", [
            { no: 1, name: "tmdb_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetMovieByTmdbIdRequest>): GetMovieByTmdbIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tmdbId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetMovieByTmdbIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMovieByTmdbIdRequest): GetMovieByTmdbIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tmdb_id */ 1:
                    message.tmdbId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMovieByTmdbIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tmdb_id = 1; */
        if (message.tmdbId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tmdbId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetMovieByTmdbIdRequest
 */
export const GetMovieByTmdbIdRequest = new GetMovieByTmdbIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMovieByTmdbIdResponse$Type extends MessageType<GetMovieByTmdbIdResponse> {
    constructor() {
        super("mediacorral.server.v1.GetMovieByTmdbIdResponse", [
            { no: 1, name: "movie", kind: "message", T: () => Movie }
        ]);
    }
    create(value?: PartialMessage<GetMovieByTmdbIdResponse>): GetMovieByTmdbIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetMovieByTmdbIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMovieByTmdbIdResponse): GetMovieByTmdbIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.Movie movie */ 1:
                    message.movie = Movie.internalBinaryRead(reader, reader.uint32(), options, message.movie);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMovieByTmdbIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.Movie movie = 1; */
        if (message.movie)
            Movie.internalBinaryWrite(message.movie, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetMovieByTmdbIdResponse
 */
export const GetMovieByTmdbIdResponse = new GetMovieByTmdbIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvShowsRequest$Type extends MessageType<ListTvShowsRequest> {
    constructor() {
        super("mediacorral.server.v1.ListTvShowsRequest", []);
    }
    create(value?: PartialMessage<ListTvShowsRequest>): ListTvShowsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListTvShowsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvShowsRequest): ListTvShowsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvShowsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvShowsRequest
 */
export const ListTvShowsRequest = new ListTvShowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvShowsResponse$Type extends MessageType<ListTvShowsResponse> {
    constructor() {
        super("mediacorral.server.v1.ListTvShowsResponse", [
            { no: 1, name: "tv_shows", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TvShow }
        ]);
    }
    create(value?: PartialMessage<ListTvShowsResponse>): ListTvShowsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tvShows = [];
        if (value !== undefined)
            reflectionMergePartial<ListTvShowsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvShowsResponse): ListTvShowsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mediacorral.server.v1.TvShow tv_shows */ 1:
                    message.tvShows.push(TvShow.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvShowsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mediacorral.server.v1.TvShow tv_shows = 1; */
        for (let i = 0; i < message.tvShows.length; i++)
            TvShow.internalBinaryWrite(message.tvShows[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvShowsResponse
 */
export const ListTvShowsResponse = new ListTvShowsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TvShow$Type extends MessageType<TvShow> {
    constructor() {
        super("mediacorral.server.v1.TvShow", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tmdb_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "poster_blob", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "original_release_year", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TvShow>): TvShow {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<TvShow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TvShow): TvShow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional int32 tmdb_id */ 2:
                    message.tmdbId = reader.int32();
                    break;
                case /* optional int64 poster_blob */ 3:
                    message.posterBlob = reader.int64().toBigInt();
                    break;
                case /* string title */ 4:
                    message.title = reader.string();
                    break;
                case /* optional string original_release_year */ 5:
                    message.originalReleaseYear = reader.string();
                    break;
                case /* optional string description */ 6:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TvShow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional int32 tmdb_id = 2; */
        if (message.tmdbId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tmdbId);
        /* optional int64 poster_blob = 3; */
        if (message.posterBlob !== undefined)
            writer.tag(3, WireType.Varint).int64(message.posterBlob);
        /* string title = 4; */
        if (message.title !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.title);
        /* optional string original_release_year = 5; */
        if (message.originalReleaseYear !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.originalReleaseYear);
        /* optional string description = 6; */
        if (message.description !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.TvShow
 */
export const TvShow = new TvShow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvSeasonsRequest$Type extends MessageType<ListTvSeasonsRequest> {
    constructor() {
        super("mediacorral.server.v1.ListTvSeasonsRequest", [
            { no: 1, name: "series_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListTvSeasonsRequest>): ListTvSeasonsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seriesId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListTvSeasonsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvSeasonsRequest): ListTvSeasonsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 series_id */ 1:
                    message.seriesId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvSeasonsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 series_id = 1; */
        if (message.seriesId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seriesId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvSeasonsRequest
 */
export const ListTvSeasonsRequest = new ListTvSeasonsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvSeasonsResponse$Type extends MessageType<ListTvSeasonsResponse> {
    constructor() {
        super("mediacorral.server.v1.ListTvSeasonsResponse", [
            { no: 1, name: "series_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tv_seasons", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TvSeason }
        ]);
    }
    create(value?: PartialMessage<ListTvSeasonsResponse>): ListTvSeasonsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seriesId = 0n;
        message.tvSeasons = [];
        if (value !== undefined)
            reflectionMergePartial<ListTvSeasonsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvSeasonsResponse): ListTvSeasonsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 series_id */ 1:
                    message.seriesId = reader.int64().toBigInt();
                    break;
                case /* repeated mediacorral.server.v1.TvSeason tv_seasons */ 2:
                    message.tvSeasons.push(TvSeason.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvSeasonsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 series_id = 1; */
        if (message.seriesId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seriesId);
        /* repeated mediacorral.server.v1.TvSeason tv_seasons = 2; */
        for (let i = 0; i < message.tvSeasons.length; i++)
            TvSeason.internalBinaryWrite(message.tvSeasons[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvSeasonsResponse
 */
export const ListTvSeasonsResponse = new ListTvSeasonsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TvSeason$Type extends MessageType<TvSeason> {
    constructor() {
        super("mediacorral.server.v1.TvSeason", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tmdb_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tv_show_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "season_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "poster_blob", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TvSeason>): TvSeason {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.tvShowId = 0n;
        message.seasonNumber = 0;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<TvSeason>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TvSeason): TvSeason {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional int32 tmdb_id */ 2:
                    message.tmdbId = reader.int32();
                    break;
                case /* int64 tv_show_id */ 3:
                    message.tvShowId = reader.int64().toBigInt();
                    break;
                case /* uint32 season_number */ 4:
                    message.seasonNumber = reader.uint32();
                    break;
                case /* optional int64 poster_blob */ 5:
                    message.posterBlob = reader.int64().toBigInt();
                    break;
                case /* string title */ 6:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 7:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TvSeason, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional int32 tmdb_id = 2; */
        if (message.tmdbId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tmdbId);
        /* int64 tv_show_id = 3; */
        if (message.tvShowId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.tvShowId);
        /* uint32 season_number = 4; */
        if (message.seasonNumber !== 0)
            writer.tag(4, WireType.Varint).uint32(message.seasonNumber);
        /* optional int64 poster_blob = 5; */
        if (message.posterBlob !== undefined)
            writer.tag(5, WireType.Varint).int64(message.posterBlob);
        /* string title = 6; */
        if (message.title !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.title);
        /* optional string description = 7; */
        if (message.description !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.TvSeason
 */
export const TvSeason = new TvSeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvEpisodesRequest$Type extends MessageType<ListTvEpisodesRequest> {
    constructor() {
        super("mediacorral.server.v1.ListTvEpisodesRequest", [
            { no: 1, name: "tv_season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListTvEpisodesRequest>): ListTvEpisodesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tvSeasonId = 0n;
        if (value !== undefined)
            reflectionMergePartial<ListTvEpisodesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvEpisodesRequest): ListTvEpisodesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tv_season_id */ 1:
                    message.tvSeasonId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvEpisodesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tv_season_id = 1; */
        if (message.tvSeasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tvSeasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvEpisodesRequest
 */
export const ListTvEpisodesRequest = new ListTvEpisodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListTvEpisodesResponse$Type extends MessageType<ListTvEpisodesResponse> {
    constructor() {
        super("mediacorral.server.v1.ListTvEpisodesResponse", [
            { no: 1, name: "tv_season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tv_episodes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TvEpisode }
        ]);
    }
    create(value?: PartialMessage<ListTvEpisodesResponse>): ListTvEpisodesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tvSeasonId = 0n;
        message.tvEpisodes = [];
        if (value !== undefined)
            reflectionMergePartial<ListTvEpisodesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListTvEpisodesResponse): ListTvEpisodesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 tv_season_id */ 1:
                    message.tvSeasonId = reader.int64().toBigInt();
                    break;
                case /* repeated mediacorral.server.v1.TvEpisode tv_episodes */ 2:
                    message.tvEpisodes.push(TvEpisode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListTvEpisodesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 tv_season_id = 1; */
        if (message.tvSeasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.tvSeasonId);
        /* repeated mediacorral.server.v1.TvEpisode tv_episodes = 2; */
        for (let i = 0; i < message.tvEpisodes.length; i++)
            TvEpisode.internalBinaryWrite(message.tvEpisodes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ListTvEpisodesResponse
 */
export const ListTvEpisodesResponse = new ListTvEpisodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TvEpisode$Type extends MessageType<TvEpisode> {
    constructor() {
        super("mediacorral.server.v1.TvEpisode", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "tmdb_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "tv_show_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "tv_season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "episode_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "thumbnail_blob", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "title", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "runtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TvEpisode>): TvEpisode {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.tvShowId = 0n;
        message.tvSeasonId = 0n;
        message.episodeNumber = 0;
        message.title = "";
        if (value !== undefined)
            reflectionMergePartial<TvEpisode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TvEpisode): TvEpisode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* optional int32 tmdb_id */ 2:
                    message.tmdbId = reader.int32();
                    break;
                case /* int64 tv_show_id */ 3:
                    message.tvShowId = reader.int64().toBigInt();
                    break;
                case /* int64 tv_season_id */ 4:
                    message.tvSeasonId = reader.int64().toBigInt();
                    break;
                case /* uint32 episode_number */ 5:
                    message.episodeNumber = reader.uint32();
                    break;
                case /* optional int64 thumbnail_blob */ 6:
                    message.thumbnailBlob = reader.int64().toBigInt();
                    break;
                case /* string title */ 7:
                    message.title = reader.string();
                    break;
                case /* optional string description */ 8:
                    message.description = reader.string();
                    break;
                case /* optional uint32 runtime */ 9:
                    message.runtime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TvEpisode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* optional int32 tmdb_id = 2; */
        if (message.tmdbId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.tmdbId);
        /* int64 tv_show_id = 3; */
        if (message.tvShowId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.tvShowId);
        /* int64 tv_season_id = 4; */
        if (message.tvSeasonId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.tvSeasonId);
        /* uint32 episode_number = 5; */
        if (message.episodeNumber !== 0)
            writer.tag(5, WireType.Varint).uint32(message.episodeNumber);
        /* optional int64 thumbnail_blob = 6; */
        if (message.thumbnailBlob !== undefined)
            writer.tag(6, WireType.Varint).int64(message.thumbnailBlob);
        /* string title = 7; */
        if (message.title !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.title);
        /* optional string description = 8; */
        if (message.description !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.description);
        /* optional uint32 runtime = 9; */
        if (message.runtime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.runtime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.TvEpisode
 */
export const TvEpisode = new TvEpisode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvShowRequest$Type extends MessageType<GetTvShowRequest> {
    constructor() {
        super("mediacorral.server.v1.GetTvShowRequest", [
            { no: 1, name: "show_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTvShowRequest>): GetTvShowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.showId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTvShowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvShowRequest): GetTvShowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 show_id */ 1:
                    message.showId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvShowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 show_id = 1; */
        if (message.showId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.showId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvShowRequest
 */
export const GetTvShowRequest = new GetTvShowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvShowResponse$Type extends MessageType<GetTvShowResponse> {
    constructor() {
        super("mediacorral.server.v1.GetTvShowResponse", [
            { no: 1, name: "tv_show", kind: "message", T: () => TvShow }
        ]);
    }
    create(value?: PartialMessage<GetTvShowResponse>): GetTvShowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTvShowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvShowResponse): GetTvShowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.TvShow tv_show */ 1:
                    message.tvShow = TvShow.internalBinaryRead(reader, reader.uint32(), options, message.tvShow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvShowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.TvShow tv_show = 1; */
        if (message.tvShow)
            TvShow.internalBinaryWrite(message.tvShow, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvShowResponse
 */
export const GetTvShowResponse = new GetTvShowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvSeasonRequest$Type extends MessageType<GetTvSeasonRequest> {
    constructor() {
        super("mediacorral.server.v1.GetTvSeasonRequest", [
            { no: 1, name: "season_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTvSeasonRequest>): GetTvSeasonRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.seasonId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTvSeasonRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvSeasonRequest): GetTvSeasonRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 season_id */ 1:
                    message.seasonId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvSeasonRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 season_id = 1; */
        if (message.seasonId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.seasonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvSeasonRequest
 */
export const GetTvSeasonRequest = new GetTvSeasonRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvSeasonResponse$Type extends MessageType<GetTvSeasonResponse> {
    constructor() {
        super("mediacorral.server.v1.GetTvSeasonResponse", [
            { no: 1, name: "tv_season", kind: "message", T: () => TvSeason }
        ]);
    }
    create(value?: PartialMessage<GetTvSeasonResponse>): GetTvSeasonResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTvSeasonResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvSeasonResponse): GetTvSeasonResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.TvSeason tv_season */ 1:
                    message.tvSeason = TvSeason.internalBinaryRead(reader, reader.uint32(), options, message.tvSeason);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvSeasonResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.TvSeason tv_season = 1; */
        if (message.tvSeason)
            TvSeason.internalBinaryWrite(message.tvSeason, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvSeasonResponse
 */
export const GetTvSeasonResponse = new GetTvSeasonResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvEpisodeRequest$Type extends MessageType<GetTvEpisodeRequest> {
    constructor() {
        super("mediacorral.server.v1.GetTvEpisodeRequest", [
            { no: 1, name: "episode_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetTvEpisodeRequest>): GetTvEpisodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.episodeId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetTvEpisodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvEpisodeRequest): GetTvEpisodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 episode_id */ 1:
                    message.episodeId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvEpisodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 episode_id = 1; */
        if (message.episodeId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.episodeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvEpisodeRequest
 */
export const GetTvEpisodeRequest = new GetTvEpisodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvEpisodeResponse$Type extends MessageType<GetTvEpisodeResponse> {
    constructor() {
        super("mediacorral.server.v1.GetTvEpisodeResponse", [
            { no: 1, name: "episode", kind: "message", T: () => TvEpisode }
        ]);
    }
    create(value?: PartialMessage<GetTvEpisodeResponse>): GetTvEpisodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTvEpisodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvEpisodeResponse): GetTvEpisodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.TvEpisode episode */ 1:
                    message.episode = TvEpisode.internalBinaryRead(reader, reader.uint32(), options, message.episode);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvEpisodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.TvEpisode episode = 1; */
        if (message.episode)
            TvEpisode.internalBinaryWrite(message.episode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvEpisodeResponse
 */
export const GetTvEpisodeResponse = new GetTvEpisodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvEpisodeByTmdbIdRequest$Type extends MessageType<GetTvEpisodeByTmdbIdRequest> {
    constructor() {
        super("mediacorral.server.v1.GetTvEpisodeByTmdbIdRequest", [
            { no: 1, name: "tmdb_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetTvEpisodeByTmdbIdRequest>): GetTvEpisodeByTmdbIdRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tmdbId = 0;
        if (value !== undefined)
            reflectionMergePartial<GetTvEpisodeByTmdbIdRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvEpisodeByTmdbIdRequest): GetTvEpisodeByTmdbIdRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 tmdb_id */ 1:
                    message.tmdbId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvEpisodeByTmdbIdRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 tmdb_id = 1; */
        if (message.tmdbId !== 0)
            writer.tag(1, WireType.Varint).int32(message.tmdbId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvEpisodeByTmdbIdRequest
 */
export const GetTvEpisodeByTmdbIdRequest = new GetTvEpisodeByTmdbIdRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetTvEpisodeByTmdbIdResponse$Type extends MessageType<GetTvEpisodeByTmdbIdResponse> {
    constructor() {
        super("mediacorral.server.v1.GetTvEpisodeByTmdbIdResponse", [
            { no: 1, name: "episode", kind: "message", T: () => TvEpisode }
        ]);
    }
    create(value?: PartialMessage<GetTvEpisodeByTmdbIdResponse>): GetTvEpisodeByTmdbIdResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetTvEpisodeByTmdbIdResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetTvEpisodeByTmdbIdResponse): GetTvEpisodeByTmdbIdResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.TvEpisode episode */ 1:
                    message.episode = TvEpisode.internalBinaryRead(reader, reader.uint32(), options, message.episode);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetTvEpisodeByTmdbIdResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.TvEpisode episode = 1; */
        if (message.episode)
            TvEpisode.internalBinaryWrite(message.episode, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetTvEpisodeByTmdbIdResponse
 */
export const GetTvEpisodeByTmdbIdResponse = new GetTvEpisodeByTmdbIdResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TagFileRequest$Type extends MessageType<TagFileRequest> {
    constructor() {
        super("mediacorral.server.v1.TagFileRequest", [
            { no: 1, name: "file", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "video_type", kind: "enum", T: () => ["mediacorral.server.v1.VideoType", VideoType, "VIDEO_TYPE_"] },
            { no: 3, name: "match_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<TagFileRequest>): TagFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.file = 0n;
        message.videoType = 0;
        if (value !== undefined)
            reflectionMergePartial<TagFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TagFileRequest): TagFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 file */ 1:
                    message.file = reader.int64().toBigInt();
                    break;
                case /* mediacorral.server.v1.VideoType video_type */ 2:
                    message.videoType = reader.int32();
                    break;
                case /* optional int64 match_id */ 3:
                    message.matchId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TagFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 file = 1; */
        if (message.file !== 0n)
            writer.tag(1, WireType.Varint).int64(message.file);
        /* mediacorral.server.v1.VideoType video_type = 2; */
        if (message.videoType !== 0)
            writer.tag(2, WireType.Varint).int32(message.videoType);
        /* optional int64 match_id = 3; */
        if (message.matchId !== undefined)
            writer.tag(3, WireType.Varint).int64(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.TagFileRequest
 */
export const TagFileRequest = new TagFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TagFileResponse$Type extends MessageType<TagFileResponse> {
    constructor() {
        super("mediacorral.server.v1.TagFileResponse", []);
    }
    create(value?: PartialMessage<TagFileResponse>): TagFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TagFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TagFileResponse): TagFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TagFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.TagFileResponse
 */
export const TagFileResponse = new TagFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobInfoRequest$Type extends MessageType<GetJobInfoRequest> {
    constructor() {
        super("mediacorral.server.v1.GetJobInfoRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetJobInfoRequest>): GetJobInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetJobInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobInfoRequest): GetJobInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetJobInfoRequest
 */
export const GetJobInfoRequest = new GetJobInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobInfoResponse$Type extends MessageType<GetJobInfoResponse> {
    constructor() {
        super("mediacorral.server.v1.GetJobInfoResponse", [
            { no: 1, name: "details", kind: "message", T: () => RipJob }
        ]);
    }
    create(value?: PartialMessage<GetJobInfoResponse>): GetJobInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetJobInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobInfoResponse): GetJobInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.RipJob details */ 1:
                    message.details = RipJob.internalBinaryRead(reader, reader.uint32(), options, message.details);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.RipJob details = 1; */
        if (message.details)
            RipJob.internalBinaryWrite(message.details, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetJobInfoResponse
 */
export const GetJobInfoResponse = new GetJobInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameJobRequest$Type extends MessageType<RenameJobRequest> {
    constructor() {
        super("mediacorral.server.v1.RenameJobRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "new_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RenameJobRequest>): RenameJobRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        message.newName = "";
        if (value !== undefined)
            reflectionMergePartial<RenameJobRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameJobRequest): RenameJobRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                case /* string new_name */ 2:
                    message.newName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameJobRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        /* string new_name = 2; */
        if (message.newName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RenameJobRequest
 */
export const RenameJobRequest = new RenameJobRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RenameJobResponse$Type extends MessageType<RenameJobResponse> {
    constructor() {
        super("mediacorral.server.v1.RenameJobResponse", []);
    }
    create(value?: PartialMessage<RenameJobResponse>): RenameJobResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RenameJobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RenameJobResponse): RenameJobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RenameJobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RenameJobResponse
 */
export const RenameJobResponse = new RenameJobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuspectJobRequest$Type extends MessageType<SuspectJobRequest> {
    constructor() {
        super("mediacorral.server.v1.SuspectJobRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "suspicion", kind: "message", T: () => SuspectedContents }
        ]);
    }
    create(value?: PartialMessage<SuspectJobRequest>): SuspectJobRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<SuspectJobRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuspectJobRequest): SuspectJobRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                case /* mediacorral.server.v1.SuspectedContents suspicion */ 2:
                    message.suspicion = SuspectedContents.internalBinaryRead(reader, reader.uint32(), options, message.suspicion);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuspectJobRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        /* mediacorral.server.v1.SuspectedContents suspicion = 2; */
        if (message.suspicion)
            SuspectedContents.internalBinaryWrite(message.suspicion, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SuspectJobRequest
 */
export const SuspectJobRequest = new SuspectJobRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SuspectJobResponse$Type extends MessageType<SuspectJobResponse> {
    constructor() {
        super("mediacorral.server.v1.SuspectJobResponse", []);
    }
    create(value?: PartialMessage<SuspectJobResponse>): SuspectJobResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SuspectJobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SuspectJobResponse): SuspectJobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SuspectJobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.SuspectJobResponse
 */
export const SuspectJobResponse = new SuspectJobResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUntaggedJobsRequest$Type extends MessageType<GetUntaggedJobsRequest> {
    constructor() {
        super("mediacorral.server.v1.GetUntaggedJobsRequest", [
            { no: 1, name: "skip", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "limit", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetUntaggedJobsRequest>): GetUntaggedJobsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.skip = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetUntaggedJobsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUntaggedJobsRequest): GetUntaggedJobsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 skip */ 1:
                    message.skip = reader.uint32();
                    break;
                case /* uint32 limit */ 2:
                    message.limit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUntaggedJobsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 skip = 1; */
        if (message.skip !== 0)
            writer.tag(1, WireType.Varint).uint32(message.skip);
        /* uint32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).uint32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetUntaggedJobsRequest
 */
export const GetUntaggedJobsRequest = new GetUntaggedJobsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUntaggedJobsResponse$Type extends MessageType<GetUntaggedJobsResponse> {
    constructor() {
        super("mediacorral.server.v1.GetUntaggedJobsResponse", [
            { no: 1, name: "rip_jobs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RipJob }
        ]);
    }
    create(value?: PartialMessage<GetUntaggedJobsResponse>): GetUntaggedJobsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.ripJobs = [];
        if (value !== undefined)
            reflectionMergePartial<GetUntaggedJobsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUntaggedJobsResponse): GetUntaggedJobsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated mediacorral.server.v1.RipJob rip_jobs */ 1:
                    message.ripJobs.push(RipJob.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUntaggedJobsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated mediacorral.server.v1.RipJob rip_jobs = 1; */
        for (let i = 0; i < message.ripJobs.length; i++)
            RipJob.internalBinaryWrite(message.ripJobs[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetUntaggedJobsResponse
 */
export const GetUntaggedJobsResponse = new GetUntaggedJobsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RipJob$Type extends MessageType<RipJob> {
    constructor() {
        super("mediacorral.server.v1.RipJob", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "disc_title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "suspected_contents", kind: "message", T: () => SuspectedContents },
            { no: 5, name: "rip_finished", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "imported", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RipJob>): RipJob {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.startTime = 0n;
        message.ripFinished = false;
        message.imported = false;
        if (value !== undefined)
            reflectionMergePartial<RipJob>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RipJob): RipJob {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* optional string disc_title */ 3:
                    message.discTitle = reader.string();
                    break;
                case /* optional mediacorral.server.v1.SuspectedContents suspected_contents */ 4:
                    message.suspectedContents = SuspectedContents.internalBinaryRead(reader, reader.uint32(), options, message.suspectedContents);
                    break;
                case /* bool rip_finished */ 5:
                    message.ripFinished = reader.bool();
                    break;
                case /* bool imported */ 6:
                    message.imported = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RipJob, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* optional string disc_title = 3; */
        if (message.discTitle !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.discTitle);
        /* optional mediacorral.server.v1.SuspectedContents suspected_contents = 4; */
        if (message.suspectedContents)
            SuspectedContents.internalBinaryWrite(message.suspectedContents, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool rip_finished = 5; */
        if (message.ripFinished !== false)
            writer.tag(5, WireType.Varint).bool(message.ripFinished);
        /* bool imported = 6; */
        if (message.imported !== false)
            writer.tag(6, WireType.Varint).bool(message.imported);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RipJob
 */
export const RipJob = new RipJob$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobCatalogueInfoRequest$Type extends MessageType<GetJobCatalogueInfoRequest> {
    constructor() {
        super("mediacorral.server.v1.GetJobCatalogueInfoRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetJobCatalogueInfoRequest>): GetJobCatalogueInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetJobCatalogueInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobCatalogueInfoRequest): GetJobCatalogueInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobCatalogueInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetJobCatalogueInfoRequest
 */
export const GetJobCatalogueInfoRequest = new GetJobCatalogueInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetJobCatalogueInfoResponse$Type extends MessageType<GetJobCatalogueInfoResponse> {
    constructor() {
        super("mediacorral.server.v1.GetJobCatalogueInfoResponse", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "start_time", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "disc_title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "suspected_contents", kind: "message", T: () => SuspectedContents },
            { no: 5, name: "video_files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => VideoFile },
            { no: 6, name: "matches", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MatchInfoItem },
            { no: 7, name: "subtitle_maps", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RipVideoBlobs },
            { no: 8, name: "ost_subtitle_files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OstDownloadsItem }
        ]);
    }
    create(value?: PartialMessage<GetJobCatalogueInfoResponse>): GetJobCatalogueInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.startTime = 0n;
        message.videoFiles = [];
        message.matches = [];
        message.subtitleMaps = [];
        message.ostSubtitleFiles = [];
        if (value !== undefined)
            reflectionMergePartial<GetJobCatalogueInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetJobCatalogueInfoResponse): GetJobCatalogueInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 start_time */ 2:
                    message.startTime = reader.int64().toBigInt();
                    break;
                case /* optional string disc_title */ 3:
                    message.discTitle = reader.string();
                    break;
                case /* optional mediacorral.server.v1.SuspectedContents suspected_contents */ 4:
                    message.suspectedContents = SuspectedContents.internalBinaryRead(reader, reader.uint32(), options, message.suspectedContents);
                    break;
                case /* repeated mediacorral.server.v1.VideoFile video_files */ 5:
                    message.videoFiles.push(VideoFile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.server.v1.MatchInfoItem matches */ 6:
                    message.matches.push(MatchInfoItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.server.v1.RipVideoBlobs subtitle_maps */ 7:
                    message.subtitleMaps.push(RipVideoBlobs.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.server.v1.OstDownloadsItem ost_subtitle_files */ 8:
                    message.ostSubtitleFiles.push(OstDownloadsItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetJobCatalogueInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 start_time = 2; */
        if (message.startTime !== 0n)
            writer.tag(2, WireType.Varint).int64(message.startTime);
        /* optional string disc_title = 3; */
        if (message.discTitle !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.discTitle);
        /* optional mediacorral.server.v1.SuspectedContents suspected_contents = 4; */
        if (message.suspectedContents)
            SuspectedContents.internalBinaryWrite(message.suspectedContents, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.server.v1.VideoFile video_files = 5; */
        for (let i = 0; i < message.videoFiles.length; i++)
            VideoFile.internalBinaryWrite(message.videoFiles[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.server.v1.MatchInfoItem matches = 6; */
        for (let i = 0; i < message.matches.length; i++)
            MatchInfoItem.internalBinaryWrite(message.matches[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.server.v1.RipVideoBlobs subtitle_maps = 7; */
        for (let i = 0; i < message.subtitleMaps.length; i++)
            RipVideoBlobs.internalBinaryWrite(message.subtitleMaps[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.server.v1.OstDownloadsItem ost_subtitle_files = 8; */
        for (let i = 0; i < message.ostSubtitleFiles.length; i++)
            OstDownloadsItem.internalBinaryWrite(message.ostSubtitleFiles[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.GetJobCatalogueInfoResponse
 */
export const GetJobCatalogueInfoResponse = new GetJobCatalogueInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VideoFile$Type extends MessageType<VideoFile> {
    constructor() {
        super("mediacorral.server.v1.VideoFile", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "video_type", kind: "enum", T: () => ["mediacorral.server.v1.VideoType", VideoType, "VIDEO_TYPE_"] },
            { no: 3, name: "match_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "blob_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "resolution_width", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "resolution_height", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "length", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "original_video_hash", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 9, name: "rip_job", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<VideoFile>): VideoFile {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.videoType = 0;
        message.blobId = "";
        if (value !== undefined)
            reflectionMergePartial<VideoFile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoFile): VideoFile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* mediacorral.server.v1.VideoType video_type */ 2:
                    message.videoType = reader.int32();
                    break;
                case /* optional int64 match_id */ 3:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* string blob_id */ 4:
                    message.blobId = reader.string();
                    break;
                case /* optional uint32 resolution_width */ 5:
                    message.resolutionWidth = reader.uint32();
                    break;
                case /* optional uint32 resolution_height */ 6:
                    message.resolutionHeight = reader.uint32();
                    break;
                case /* optional uint32 length */ 7:
                    message.length = reader.uint32();
                    break;
                case /* optional bytes original_video_hash */ 8:
                    message.originalVideoHash = reader.bytes();
                    break;
                case /* optional int64 rip_job */ 9:
                    message.ripJob = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VideoFile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* mediacorral.server.v1.VideoType video_type = 2; */
        if (message.videoType !== 0)
            writer.tag(2, WireType.Varint).int32(message.videoType);
        /* optional int64 match_id = 3; */
        if (message.matchId !== undefined)
            writer.tag(3, WireType.Varint).int64(message.matchId);
        /* string blob_id = 4; */
        if (message.blobId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.blobId);
        /* optional uint32 resolution_width = 5; */
        if (message.resolutionWidth !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.resolutionWidth);
        /* optional uint32 resolution_height = 6; */
        if (message.resolutionHeight !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.resolutionHeight);
        /* optional uint32 length = 7; */
        if (message.length !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.length);
        /* optional bytes original_video_hash = 8; */
        if (message.originalVideoHash !== undefined)
            writer.tag(8, WireType.LengthDelimited).bytes(message.originalVideoHash);
        /* optional int64 rip_job = 9; */
        if (message.ripJob !== undefined)
            writer.tag(9, WireType.Varint).int64(message.ripJob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.VideoFile
 */
export const VideoFile = new VideoFile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchInfoItem$Type extends MessageType<MatchInfoItem> {
    constructor() {
        super("mediacorral.server.v1.MatchInfoItem", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "video_file_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ost_download_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "distance", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "max_distance", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MatchInfoItem>): MatchInfoItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.videoFileId = 0n;
        message.ostDownloadId = 0n;
        message.distance = 0;
        message.maxDistance = 0;
        if (value !== undefined)
            reflectionMergePartial<MatchInfoItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchInfoItem): MatchInfoItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 video_file_id */ 2:
                    message.videoFileId = reader.int64().toBigInt();
                    break;
                case /* int64 ost_download_id */ 3:
                    message.ostDownloadId = reader.int64().toBigInt();
                    break;
                case /* uint32 distance */ 4:
                    message.distance = reader.uint32();
                    break;
                case /* uint32 max_distance */ 5:
                    message.maxDistance = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchInfoItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 video_file_id = 2; */
        if (message.videoFileId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.videoFileId);
        /* int64 ost_download_id = 3; */
        if (message.ostDownloadId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.ostDownloadId);
        /* uint32 distance = 4; */
        if (message.distance !== 0)
            writer.tag(4, WireType.Varint).uint32(message.distance);
        /* uint32 max_distance = 5; */
        if (message.maxDistance !== 0)
            writer.tag(5, WireType.Varint).uint32(message.maxDistance);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.MatchInfoItem
 */
export const MatchInfoItem = new MatchInfoItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RipVideoBlobs$Type extends MessageType<RipVideoBlobs> {
    constructor() {
        super("mediacorral.server.v1.RipVideoBlobs", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "video_blob", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "subtitle_blob", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RipVideoBlobs>): RipVideoBlobs {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.jobId = 0n;
        message.videoBlob = "";
        if (value !== undefined)
            reflectionMergePartial<RipVideoBlobs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RipVideoBlobs): RipVideoBlobs {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* int64 job_id */ 2:
                    message.jobId = reader.int64().toBigInt();
                    break;
                case /* string video_blob */ 3:
                    message.videoBlob = reader.string();
                    break;
                case /* optional string subtitle_blob */ 4:
                    message.subtitleBlob = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RipVideoBlobs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* int64 job_id = 2; */
        if (message.jobId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.jobId);
        /* string video_blob = 3; */
        if (message.videoBlob !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.videoBlob);
        /* optional string subtitle_blob = 4; */
        if (message.subtitleBlob !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.subtitleBlob);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.RipVideoBlobs
 */
export const RipVideoBlobs = new RipVideoBlobs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OstDownloadsItem$Type extends MessageType<OstDownloadsItem> {
    constructor() {
        super("mediacorral.server.v1.OstDownloadsItem", [
            { no: 1, name: "id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "video_type", kind: "enum", T: () => ["mediacorral.server.v1.VideoType", VideoType, "VIDEO_TYPE_"] },
            { no: 3, name: "match_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "blob_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<OstDownloadsItem>): OstDownloadsItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.videoType = 0;
        message.matchId = 0n;
        message.filename = "";
        message.blobId = "";
        if (value !== undefined)
            reflectionMergePartial<OstDownloadsItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OstDownloadsItem): OstDownloadsItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 id */ 1:
                    message.id = reader.int64().toBigInt();
                    break;
                case /* mediacorral.server.v1.VideoType video_type */ 2:
                    message.videoType = reader.int32();
                    break;
                case /* int64 match_id */ 3:
                    message.matchId = reader.int64().toBigInt();
                    break;
                case /* string filename */ 4:
                    message.filename = reader.string();
                    break;
                case /* string blob_id */ 5:
                    message.blobId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: OstDownloadsItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 id = 1; */
        if (message.id !== 0n)
            writer.tag(1, WireType.Varint).int64(message.id);
        /* mediacorral.server.v1.VideoType video_type = 2; */
        if (message.videoType !== 0)
            writer.tag(2, WireType.Varint).int32(message.videoType);
        /* int64 match_id = 3; */
        if (message.matchId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.matchId);
        /* string filename = 4; */
        if (message.filename !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.filename);
        /* string blob_id = 5; */
        if (message.blobId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.blobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.OstDownloadsItem
 */
export const OstDownloadsItem = new OstDownloadsItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PruneRipJobRequest$Type extends MessageType<PruneRipJobRequest> {
    constructor() {
        super("mediacorral.server.v1.PruneRipJobRequest", [
            { no: 1, name: "job_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PruneRipJobRequest>): PruneRipJobRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.jobId = 0n;
        if (value !== undefined)
            reflectionMergePartial<PruneRipJobRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PruneRipJobRequest): PruneRipJobRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 job_id */ 1:
                    message.jobId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PruneRipJobRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 job_id = 1; */
        if (message.jobId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.jobId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.PruneRipJobRequest
 */
export const PruneRipJobRequest = new PruneRipJobRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PruneRipJobResponse$Type extends MessageType<PruneRipJobResponse> {
    constructor() {
        super("mediacorral.server.v1.PruneRipJobResponse", []);
    }
    create(value?: PartialMessage<PruneRipJobResponse>): PruneRipJobResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PruneRipJobResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PruneRipJobResponse): PruneRipJobResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PruneRipJobResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.PruneRipJobResponse
 */
export const PruneRipJobResponse = new PruneRipJobResponse$Type();
/**
 * @generated ServiceType for protobuf service mediacorral.server.v1.CoordinatorApiService
 */
export const CoordinatorApiService = new ServiceType("mediacorral.server.v1.CoordinatorApiService", [
    { name: "GetSubtitles", options: {}, I: GetSubtitlesRequest, O: GetSubtitlesResponse },
    { name: "SearchTmdbMulti", options: {}, I: SearchTmdbMultiRequest, O: SearchTmdbMultiResponse },
    { name: "SearchTmdbTv", options: {}, I: SearchTmdbTvRequest, O: SearchTmdbTvResponse },
    { name: "SearchTmdbMovie", options: {}, I: SearchTmdbMovieRequest, O: SearchTmdbMovieResponse },
    { name: "ImportTmdbTv", options: {}, I: ImportTmdbTvRequest, O: ImportTmdbTvResponse },
    { name: "ImportTmdbMovie", options: {}, I: ImportTmdbMovieRequest, O: ImportTmdbMovieResponse },
    { name: "RebuildExportsDir", options: {}, I: RebuildExportsDirRequest, O: RebuildExportsDirResponse },
    { name: "AutoripStatus", options: {}, I: AutoripStatusRequest, O: AutoripStatusResponse },
    { name: "ListDrives", options: {}, I: ListDrivesRequest, O: ListDrivesResponse },
    { name: "StartRipJob", options: {}, I: StartRipJobRequest, O: StartRipJobResponse },
    { name: "GetRipJobStatus", options: {}, I: GetRipJobStatusRequest, O: GetRipJobStatusResponse },
    { name: "StreamRipJobUpdates", serverStreaming: true, options: {}, I: StreamRipJobUpdatesRequest, O: RipUpdate },
    { name: "Eject", options: {}, I: EjectRequest, O: EjectResponse },
    { name: "Retract", options: {}, I: RetractRequest, O: RetractResponse },
    { name: "GetDriveState", options: {}, I: GetDriveStateRequest, O: DriveState },
    { name: "ListMovies", options: {}, I: ListMoviesRequest, O: ListMoviesResponse },
    { name: "GetMovie", options: {}, I: GetMovieRequest, O: GetMovieResponse },
    { name: "GetMovieByTmdbId", options: {}, I: GetMovieByTmdbIdRequest, O: GetMovieByTmdbIdResponse },
    { name: "ListTvShows", options: {}, I: ListTvShowsRequest, O: ListTvShowsResponse },
    { name: "ListTvSeasons", options: {}, I: ListTvSeasonsRequest, O: ListTvSeasonsResponse },
    { name: "ListTvEpisodes", options: {}, I: ListTvEpisodesRequest, O: ListTvEpisodesResponse },
    { name: "GetTvShow", options: {}, I: GetTvShowRequest, O: GetTvShowResponse },
    { name: "GetTvSeason", options: {}, I: GetTvSeasonRequest, O: GetTvSeasonResponse },
    { name: "GetTvEpisode", options: {}, I: GetTvEpisodeRequest, O: GetTvEpisodeResponse },
    { name: "GetTvEpisodeByTmdbId", options: {}, I: GetTvEpisodeByTmdbIdRequest, O: GetTvEpisodeByTmdbIdResponse },
    { name: "TagFile", options: {}, I: TagFileRequest, O: TagFileResponse },
    { name: "GetJobInfo", options: {}, I: GetJobInfoRequest, O: GetJobInfoResponse },
    { name: "RenameJob", options: {}, I: RenameJobRequest, O: RenameJobResponse },
    { name: "SuspectJob", options: {}, I: SuspectJobRequest, O: SuspectJobResponse },
    { name: "GetUntaggedJobs", options: {}, I: GetUntaggedJobsRequest, O: GetUntaggedJobsResponse },
    { name: "GetJobCatalogueInfo", options: {}, I: GetJobCatalogueInfoRequest, O: GetJobCatalogueInfoResponse },
    { name: "PruneRipJob", options: {}, I: PruneRipJobRequest, O: PruneRipJobResponse }
]);
