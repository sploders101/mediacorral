// @generated by protobuf-ts 2.11.1 with parameter long_type_bigint
// @generated from protobuf file "mediacorral/server/v1/api.proto" (package "mediacorral.server.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { CoordinatorApiService } from "./api";
import type { GetJobCatalogueInfoResponse } from "./api";
import type { GetJobCatalogueInfoRequest } from "./api";
import type { GetUntaggedJobsResponse } from "./api";
import type { GetUntaggedJobsRequest } from "./api";
import type { SuspectJobResponse } from "./api";
import type { SuspectJobRequest } from "./api";
import type { RenameJobResponse } from "./api";
import type { RenameJobRequest } from "./api";
import type { GetJobInfoResponse } from "./api";
import type { GetJobInfoRequest } from "./api";
import type { TagFileResponse } from "./api";
import type { TagFileRequest } from "./api";
import type { GetTvEpisodeByTmdbIdResponse } from "./api";
import type { GetTvEpisodeByTmdbIdRequest } from "./api";
import type { GetTvEpisodeResponse } from "./api";
import type { GetTvEpisodeRequest } from "./api";
import type { GetTvSeasonResponse } from "./api";
import type { GetTvSeasonRequest } from "./api";
import type { GetTvShowResponse } from "./api";
import type { GetTvShowRequest } from "./api";
import type { ListTvEpisodesResponse } from "./api";
import type { ListTvEpisodesRequest } from "./api";
import type { ListTvSeasonsResponse } from "./api";
import type { ListTvSeasonsRequest } from "./api";
import type { ListTvShowsResponse } from "./api";
import type { ListTvShowsRequest } from "./api";
import type { GetMovieByTmdbIdResponse } from "./api";
import type { GetMovieByTmdbIdRequest } from "./api";
import type { GetMovieResponse } from "./api";
import type { GetMovieRequest } from "./api";
import type { ListMoviesResponse } from "./api";
import type { ListMoviesRequest } from "./api";
import type { DriveState } from "../../drive_controller/v1/main";
import type { GetDriveStateRequest } from "./api";
import type { RetractResponse } from "./api";
import type { RetractRequest } from "./api";
import type { EjectResponse } from "./api";
import type { EjectRequest } from "./api";
import type { RipUpdate } from "../../drive_controller/v1/main";
import type { StreamRipJobUpdatesRequest } from "./api";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { GetRipJobStatusResponse } from "./api";
import type { GetRipJobStatusRequest } from "./api";
import type { StartRipJobResponse } from "./api";
import type { StartRipJobRequest } from "./api";
import type { ListDrivesResponse } from "./api";
import type { ListDrivesRequest } from "./api";
import type { AutoripStatusResponse } from "./api";
import type { AutoripStatusRequest } from "./api";
import type { RebuildExportsDirResponse } from "./api";
import type { RebuildExportsDirRequest } from "./api";
import type { ImportTmdbMovieResponse } from "./api";
import type { ImportTmdbMovieRequest } from "./api";
import type { ImportTmdbTvResponse } from "./api";
import type { ImportTmdbTvRequest } from "./api";
import type { SearchTmdbMovieResponse } from "./api";
import type { SearchTmdbMovieRequest } from "./api";
import type { SearchTmdbTvResponse } from "./api";
import type { SearchTmdbTvRequest } from "./api";
import type { SearchTmdbMultiResponse } from "./api";
import type { SearchTmdbMultiRequest } from "./api";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetSubtitlesResponse } from "./api";
import type { GetSubtitlesRequest } from "./api";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service mediacorral.server.v1.CoordinatorApiService
 */
export interface ICoordinatorApiServiceClient {
    /**
     * Gets textual subtitles
     *
     * @generated from protobuf rpc: GetSubtitles
     */
    getSubtitles(input: GetSubtitlesRequest, options?: RpcOptions): UnaryCall<GetSubtitlesRequest, GetSubtitlesResponse>;
    /**
     * Searches TheMovieDatabase for a given query
     *
     * @generated from protobuf rpc: SearchTmdbMulti
     */
    searchTmdbMulti(input: SearchTmdbMultiRequest, options?: RpcOptions): UnaryCall<SearchTmdbMultiRequest, SearchTmdbMultiResponse>;
    /**
     * Searches TheMovieDatabase for a TV show
     *
     * @generated from protobuf rpc: SearchTmdbTv
     */
    searchTmdbTv(input: SearchTmdbTvRequest, options?: RpcOptions): UnaryCall<SearchTmdbTvRequest, SearchTmdbTvResponse>;
    /**
     * Searches TheMovieDatabase for a Movie
     *
     * @generated from protobuf rpc: SearchTmdbMovie
     */
    searchTmdbMovie(input: SearchTmdbMovieRequest, options?: RpcOptions): UnaryCall<SearchTmdbMovieRequest, SearchTmdbMovieResponse>;
    /**
     * Imports a TV show from TheMovieDatabase
     *
     * @generated from protobuf rpc: ImportTmdbTv
     */
    importTmdbTv(input: ImportTmdbTvRequest, options?: RpcOptions): UnaryCall<ImportTmdbTvRequest, ImportTmdbTvResponse>;
    /**
     * Imports a Movie from TheMovieDatabase
     *
     * @generated from protobuf rpc: ImportTmdbMovie
     */
    importTmdbMovie(input: ImportTmdbMovieRequest, options?: RpcOptions): UnaryCall<ImportTmdbMovieRequest, ImportTmdbMovieResponse>;
    /**
     * Rebuild exports directory
     *
     * @generated from protobuf rpc: RebuildExportsDir
     */
    rebuildExportsDir(input: RebuildExportsDirRequest, options?: RpcOptions): UnaryCall<RebuildExportsDirRequest, RebuildExportsDirResponse>;
    /**
     * Gets/sets the status of the auto-ripper
     *
     * @generated from protobuf rpc: AutoripStatus
     */
    autoripStatus(input: AutoripStatusRequest, options?: RpcOptions): UnaryCall<AutoripStatusRequest, AutoripStatusResponse>;
    /**
     * Lists the currently-registered drives
     *
     * @generated from protobuf rpc: ListDrives
     */
    listDrives(input: ListDrivesRequest, options?: RpcOptions): UnaryCall<ListDrivesRequest, ListDrivesResponse>;
    /**
     * Starts a rip job
     *
     * @generated from protobuf rpc: StartRipJob
     */
    startRipJob(input: StartRipJobRequest, options?: RpcOptions): UnaryCall<StartRipJobRequest, StartRipJobResponse>;
    /**
     * Gets the current status of a rip job
     *
     * @generated from protobuf rpc: GetRipJobStatus
     */
    getRipJobStatus(input: GetRipJobStatusRequest, options?: RpcOptions): UnaryCall<GetRipJobStatusRequest, GetRipJobStatusResponse>;
    /**
     * Streams status updates from a rip job.
     * Initial state is always `RipStatus::default()`.
     *
     * @generated from protobuf rpc: StreamRipJobUpdates
     */
    streamRipJobUpdates(input: StreamRipJobUpdatesRequest, options?: RpcOptions): ServerStreamingCall<StreamRipJobUpdatesRequest, RipUpdate>;
    /**
     * Ejects a disc
     *
     * @generated from protobuf rpc: Eject
     */
    eject(input: EjectRequest, options?: RpcOptions): UnaryCall<EjectRequest, EjectResponse>;
    /**
     * Retracts a disc
     *
     * @generated from protobuf rpc: Retract
     */
    retract(input: RetractRequest, options?: RpcOptions): UnaryCall<RetractRequest, RetractResponse>;
    /**
     * Gets the current state of the drive
     *
     * @generated from protobuf rpc: GetDriveState
     */
    getDriveState(input: GetDriveStateRequest, options?: RpcOptions): UnaryCall<GetDriveStateRequest, DriveState>;
    /**
     * Lists the movies in the database
     *
     * @generated from protobuf rpc: ListMovies
     */
    listMovies(input: ListMoviesRequest, options?: RpcOptions): UnaryCall<ListMoviesRequest, ListMoviesResponse>;
    /**
     * Gets a movie by id
     *
     * @generated from protobuf rpc: GetMovie
     */
    getMovie(input: GetMovieRequest, options?: RpcOptions): UnaryCall<GetMovieRequest, GetMovieResponse>;
    /**
     * Gets a movie from the database by its TMDB ID
     *
     * @generated from protobuf rpc: GetMovieByTmdbId
     */
    getMovieByTmdbId(input: GetMovieByTmdbIdRequest, options?: RpcOptions): UnaryCall<GetMovieByTmdbIdRequest, GetMovieByTmdbIdResponse>;
    /**
     * Lists the TV shows in the database
     *
     * @generated from protobuf rpc: ListTvShows
     */
    listTvShows(input: ListTvShowsRequest, options?: RpcOptions): UnaryCall<ListTvShowsRequest, ListTvShowsResponse>;
    /**
     * Lists the seasons for a given TV show
     *
     * @generated from protobuf rpc: ListTvSeasons
     */
    listTvSeasons(input: ListTvSeasonsRequest, options?: RpcOptions): UnaryCall<ListTvSeasonsRequest, ListTvSeasonsResponse>;
    /**
     * Lists the episodes for a given season
     *
     * @generated from protobuf rpc: ListTvEpisodes
     */
    listTvEpisodes(input: ListTvEpisodesRequest, options?: RpcOptions): UnaryCall<ListTvEpisodesRequest, ListTvEpisodesResponse>;
    /**
     * Gets a TV show by id
     *
     * @generated from protobuf rpc: GetTvShow
     */
    getTvShow(input: GetTvShowRequest, options?: RpcOptions): UnaryCall<GetTvShowRequest, GetTvShowResponse>;
    /**
     * Gets a TV series by id
     *
     * @generated from protobuf rpc: GetTvSeason
     */
    getTvSeason(input: GetTvSeasonRequest, options?: RpcOptions): UnaryCall<GetTvSeasonRequest, GetTvSeasonResponse>;
    /**
     * Gets a particular TV episode
     *
     * @generated from protobuf rpc: GetTvEpisode
     */
    getTvEpisode(input: GetTvEpisodeRequest, options?: RpcOptions): UnaryCall<GetTvEpisodeRequest, GetTvEpisodeResponse>;
    /**
     * Gets a particular TV episode by TMDB id
     *
     * @generated from protobuf rpc: GetTvEpisodeByTmdbId
     */
    getTvEpisodeByTmdbId(input: GetTvEpisodeByTmdbIdRequest, options?: RpcOptions): UnaryCall<GetTvEpisodeByTmdbIdRequest, GetTvEpisodeByTmdbIdResponse>;
    /**
     * Tags a video file with metadata
     *
     * @generated from protobuf rpc: TagFile
     */
    tagFile(input: TagFileRequest, options?: RpcOptions): UnaryCall<TagFileRequest, TagFileResponse>;
    /**
     * Gets a particular job
     *
     * @generated from protobuf rpc: GetJobInfo
     */
    getJobInfo(input: GetJobInfoRequest, options?: RpcOptions): UnaryCall<GetJobInfoRequest, GetJobInfoResponse>;
    /**
     * Renames a job
     *
     * @generated from protobuf rpc: RenameJob
     */
    renameJob(input: RenameJobRequest, options?: RpcOptions): UnaryCall<RenameJobRequest, RenameJobResponse>;
    /**
     * Adds a suspicion to a job
     *
     * @generated from protobuf rpc: SuspectJob
     */
    suspectJob(input: SuspectJobRequest, options?: RpcOptions): UnaryCall<SuspectJobRequest, SuspectJobResponse>;
    /**
     * Gets a list of jobs containing untagged files
     *
     * @generated from protobuf rpc: GetUntaggedJobs
     */
    getUntaggedJobs(input: GetUntaggedJobsRequest, options?: RpcOptions): UnaryCall<GetUntaggedJobsRequest, GetUntaggedJobsResponse>;
    /**
     * Gets all info needed to catalog a job
     *
     * @generated from protobuf rpc: GetJobCatalogueInfo
     */
    getJobCatalogueInfo(input: GetJobCatalogueInfoRequest, options?: RpcOptions): UnaryCall<GetJobCatalogueInfoRequest, GetJobCatalogueInfoResponse>;
}
/**
 * @generated from protobuf service mediacorral.server.v1.CoordinatorApiService
 */
export class CoordinatorApiServiceClient implements ICoordinatorApiServiceClient, ServiceInfo {
    typeName = CoordinatorApiService.typeName;
    methods = CoordinatorApiService.methods;
    options = CoordinatorApiService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Gets textual subtitles
     *
     * @generated from protobuf rpc: GetSubtitles
     */
    getSubtitles(input: GetSubtitlesRequest, options?: RpcOptions): UnaryCall<GetSubtitlesRequest, GetSubtitlesResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetSubtitlesRequest, GetSubtitlesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Searches TheMovieDatabase for a given query
     *
     * @generated from protobuf rpc: SearchTmdbMulti
     */
    searchTmdbMulti(input: SearchTmdbMultiRequest, options?: RpcOptions): UnaryCall<SearchTmdbMultiRequest, SearchTmdbMultiResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchTmdbMultiRequest, SearchTmdbMultiResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Searches TheMovieDatabase for a TV show
     *
     * @generated from protobuf rpc: SearchTmdbTv
     */
    searchTmdbTv(input: SearchTmdbTvRequest, options?: RpcOptions): UnaryCall<SearchTmdbTvRequest, SearchTmdbTvResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchTmdbTvRequest, SearchTmdbTvResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Searches TheMovieDatabase for a Movie
     *
     * @generated from protobuf rpc: SearchTmdbMovie
     */
    searchTmdbMovie(input: SearchTmdbMovieRequest, options?: RpcOptions): UnaryCall<SearchTmdbMovieRequest, SearchTmdbMovieResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchTmdbMovieRequest, SearchTmdbMovieResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Imports a TV show from TheMovieDatabase
     *
     * @generated from protobuf rpc: ImportTmdbTv
     */
    importTmdbTv(input: ImportTmdbTvRequest, options?: RpcOptions): UnaryCall<ImportTmdbTvRequest, ImportTmdbTvResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportTmdbTvRequest, ImportTmdbTvResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Imports a Movie from TheMovieDatabase
     *
     * @generated from protobuf rpc: ImportTmdbMovie
     */
    importTmdbMovie(input: ImportTmdbMovieRequest, options?: RpcOptions): UnaryCall<ImportTmdbMovieRequest, ImportTmdbMovieResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ImportTmdbMovieRequest, ImportTmdbMovieResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Rebuild exports directory
     *
     * @generated from protobuf rpc: RebuildExportsDir
     */
    rebuildExportsDir(input: RebuildExportsDirRequest, options?: RpcOptions): UnaryCall<RebuildExportsDirRequest, RebuildExportsDirResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<RebuildExportsDirRequest, RebuildExportsDirResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets/sets the status of the auto-ripper
     *
     * @generated from protobuf rpc: AutoripStatus
     */
    autoripStatus(input: AutoripStatusRequest, options?: RpcOptions): UnaryCall<AutoripStatusRequest, AutoripStatusResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<AutoripStatusRequest, AutoripStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists the currently-registered drives
     *
     * @generated from protobuf rpc: ListDrives
     */
    listDrives(input: ListDrivesRequest, options?: RpcOptions): UnaryCall<ListDrivesRequest, ListDrivesResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListDrivesRequest, ListDrivesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Starts a rip job
     *
     * @generated from protobuf rpc: StartRipJob
     */
    startRipJob(input: StartRipJobRequest, options?: RpcOptions): UnaryCall<StartRipJobRequest, StartRipJobResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartRipJobRequest, StartRipJobResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets the current status of a rip job
     *
     * @generated from protobuf rpc: GetRipJobStatus
     */
    getRipJobStatus(input: GetRipJobStatusRequest, options?: RpcOptions): UnaryCall<GetRipJobStatusRequest, GetRipJobStatusResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRipJobStatusRequest, GetRipJobStatusResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Streams status updates from a rip job.
     * Initial state is always `RipStatus::default()`.
     *
     * @generated from protobuf rpc: StreamRipJobUpdates
     */
    streamRipJobUpdates(input: StreamRipJobUpdatesRequest, options?: RpcOptions): ServerStreamingCall<StreamRipJobUpdatesRequest, RipUpdate> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamRipJobUpdatesRequest, RipUpdate>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * Ejects a disc
     *
     * @generated from protobuf rpc: Eject
     */
    eject(input: EjectRequest, options?: RpcOptions): UnaryCall<EjectRequest, EjectResponse> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<EjectRequest, EjectResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Retracts a disc
     *
     * @generated from protobuf rpc: Retract
     */
    retract(input: RetractRequest, options?: RpcOptions): UnaryCall<RetractRequest, RetractResponse> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<RetractRequest, RetractResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets the current state of the drive
     *
     * @generated from protobuf rpc: GetDriveState
     */
    getDriveState(input: GetDriveStateRequest, options?: RpcOptions): UnaryCall<GetDriveStateRequest, DriveState> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetDriveStateRequest, DriveState>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists the movies in the database
     *
     * @generated from protobuf rpc: ListMovies
     */
    listMovies(input: ListMoviesRequest, options?: RpcOptions): UnaryCall<ListMoviesRequest, ListMoviesResponse> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListMoviesRequest, ListMoviesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a movie by id
     *
     * @generated from protobuf rpc: GetMovie
     */
    getMovie(input: GetMovieRequest, options?: RpcOptions): UnaryCall<GetMovieRequest, GetMovieResponse> {
        const method = this.methods[16], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMovieRequest, GetMovieResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a movie from the database by its TMDB ID
     *
     * @generated from protobuf rpc: GetMovieByTmdbId
     */
    getMovieByTmdbId(input: GetMovieByTmdbIdRequest, options?: RpcOptions): UnaryCall<GetMovieByTmdbIdRequest, GetMovieByTmdbIdResponse> {
        const method = this.methods[17], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetMovieByTmdbIdRequest, GetMovieByTmdbIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists the TV shows in the database
     *
     * @generated from protobuf rpc: ListTvShows
     */
    listTvShows(input: ListTvShowsRequest, options?: RpcOptions): UnaryCall<ListTvShowsRequest, ListTvShowsResponse> {
        const method = this.methods[18], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTvShowsRequest, ListTvShowsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists the seasons for a given TV show
     *
     * @generated from protobuf rpc: ListTvSeasons
     */
    listTvSeasons(input: ListTvSeasonsRequest, options?: RpcOptions): UnaryCall<ListTvSeasonsRequest, ListTvSeasonsResponse> {
        const method = this.methods[19], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTvSeasonsRequest, ListTvSeasonsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Lists the episodes for a given season
     *
     * @generated from protobuf rpc: ListTvEpisodes
     */
    listTvEpisodes(input: ListTvEpisodesRequest, options?: RpcOptions): UnaryCall<ListTvEpisodesRequest, ListTvEpisodesResponse> {
        const method = this.methods[20], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTvEpisodesRequest, ListTvEpisodesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a TV show by id
     *
     * @generated from protobuf rpc: GetTvShow
     */
    getTvShow(input: GetTvShowRequest, options?: RpcOptions): UnaryCall<GetTvShowRequest, GetTvShowResponse> {
        const method = this.methods[21], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTvShowRequest, GetTvShowResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a TV series by id
     *
     * @generated from protobuf rpc: GetTvSeason
     */
    getTvSeason(input: GetTvSeasonRequest, options?: RpcOptions): UnaryCall<GetTvSeasonRequest, GetTvSeasonResponse> {
        const method = this.methods[22], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTvSeasonRequest, GetTvSeasonResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a particular TV episode
     *
     * @generated from protobuf rpc: GetTvEpisode
     */
    getTvEpisode(input: GetTvEpisodeRequest, options?: RpcOptions): UnaryCall<GetTvEpisodeRequest, GetTvEpisodeResponse> {
        const method = this.methods[23], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTvEpisodeRequest, GetTvEpisodeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a particular TV episode by TMDB id
     *
     * @generated from protobuf rpc: GetTvEpisodeByTmdbId
     */
    getTvEpisodeByTmdbId(input: GetTvEpisodeByTmdbIdRequest, options?: RpcOptions): UnaryCall<GetTvEpisodeByTmdbIdRequest, GetTvEpisodeByTmdbIdResponse> {
        const method = this.methods[24], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetTvEpisodeByTmdbIdRequest, GetTvEpisodeByTmdbIdResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Tags a video file with metadata
     *
     * @generated from protobuf rpc: TagFile
     */
    tagFile(input: TagFileRequest, options?: RpcOptions): UnaryCall<TagFileRequest, TagFileResponse> {
        const method = this.methods[25], opt = this._transport.mergeOptions(options);
        return stackIntercept<TagFileRequest, TagFileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a particular job
     *
     * @generated from protobuf rpc: GetJobInfo
     */
    getJobInfo(input: GetJobInfoRequest, options?: RpcOptions): UnaryCall<GetJobInfoRequest, GetJobInfoResponse> {
        const method = this.methods[26], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetJobInfoRequest, GetJobInfoResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Renames a job
     *
     * @generated from protobuf rpc: RenameJob
     */
    renameJob(input: RenameJobRequest, options?: RpcOptions): UnaryCall<RenameJobRequest, RenameJobResponse> {
        const method = this.methods[27], opt = this._transport.mergeOptions(options);
        return stackIntercept<RenameJobRequest, RenameJobResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Adds a suspicion to a job
     *
     * @generated from protobuf rpc: SuspectJob
     */
    suspectJob(input: SuspectJobRequest, options?: RpcOptions): UnaryCall<SuspectJobRequest, SuspectJobResponse> {
        const method = this.methods[28], opt = this._transport.mergeOptions(options);
        return stackIntercept<SuspectJobRequest, SuspectJobResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets a list of jobs containing untagged files
     *
     * @generated from protobuf rpc: GetUntaggedJobs
     */
    getUntaggedJobs(input: GetUntaggedJobsRequest, options?: RpcOptions): UnaryCall<GetUntaggedJobsRequest, GetUntaggedJobsResponse> {
        const method = this.methods[29], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUntaggedJobsRequest, GetUntaggedJobsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Gets all info needed to catalog a job
     *
     * @generated from protobuf rpc: GetJobCatalogueInfo
     */
    getJobCatalogueInfo(input: GetJobCatalogueInfoRequest, options?: RpcOptions): UnaryCall<GetJobCatalogueInfoRequest, GetJobCatalogueInfoResponse> {
        const method = this.methods[30], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetJobCatalogueInfoRequest, GetJobCatalogueInfoResponse>("unary", this._transport, method, opt, input);
    }
}
