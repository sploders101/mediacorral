// @generated by protobuf-ts 2.11.1 with parameter long_type_string
// @generated from protobuf file "mediacorral/server/v1/exports.proto" (package "mediacorral.server.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mediacorral.server.v1.ExportSettings
 */
export interface ExportSettings {
    /**
     * @generated from protobuf field: mediacorral.server.v1.MediaType media_type = 1
     */
    mediaType: MediaType;
    /**
     * @generated from protobuf field: mediacorral.server.v1.LinkType link_type = 2
     */
    linkType: LinkType;
}
/**
 * @generated from protobuf enum mediacorral.server.v1.MediaType
 */
export enum MediaType {
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_MOVIES = 1;
     */
    MOVIES = 1,
    /**
     * @generated from protobuf enum value: MEDIA_TYPE_TV = 2;
     */
    TV = 2
}
/**
 * @generated from protobuf enum mediacorral.server.v1.LinkType
 */
export enum LinkType {
    /**
     * @generated from protobuf enum value: LINK_TYPE_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: LINK_TYPE_SYMBOLIC = 1;
     */
    SYMBOLIC = 1,
    /**
     * @generated from protobuf enum value: LINK_TYPE_HARD = 2;
     */
    HARD = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ExportSettings$Type extends MessageType<ExportSettings> {
    constructor() {
        super("mediacorral.server.v1.ExportSettings", [
            { no: 1, name: "media_type", kind: "enum", T: () => ["mediacorral.server.v1.MediaType", MediaType, "MEDIA_TYPE_"] },
            { no: 2, name: "link_type", kind: "enum", T: () => ["mediacorral.server.v1.LinkType", LinkType, "LINK_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ExportSettings>): ExportSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.mediaType = 0;
        message.linkType = 0;
        if (value !== undefined)
            reflectionMergePartial<ExportSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExportSettings): ExportSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* mediacorral.server.v1.MediaType media_type */ 1:
                    message.mediaType = reader.int32();
                    break;
                case /* mediacorral.server.v1.LinkType link_type */ 2:
                    message.linkType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExportSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* mediacorral.server.v1.MediaType media_type = 1; */
        if (message.mediaType !== 0)
            writer.tag(1, WireType.Varint).int32(message.mediaType);
        /* mediacorral.server.v1.LinkType link_type = 2; */
        if (message.linkType !== 0)
            writer.tag(2, WireType.Varint).int32(message.linkType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.server.v1.ExportSettings
 */
export const ExportSettings = new ExportSettings$Type();
