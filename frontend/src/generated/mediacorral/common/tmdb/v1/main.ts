// @generated by protobuf-ts 2.11.1 with parameter long_type_bigint
// @generated from protobuf file "mediacorral/common/tmdb/v1/main.proto" (package "mediacorral.common.tmdb.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbAnyTitle
 */
export interface TmdbAnyTitle {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string type = 2
     */
    type: string;
    /**
     * @generated from protobuf field: optional string title = 3
     */
    title?: string;
    /**
     * @generated from protobuf field: optional string backdrop_path = 4
     */
    backdropPath?: string;
    /**
     * @generated from protobuf field: optional string poster_path = 5
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: optional string overview = 6
     */
    overview?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbMovieResult
 */
export interface TmdbMovieResult {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional string title = 2
     */
    title?: string;
    /**
     * @generated from protobuf field: optional string release_date = 3
     */
    releaseDate?: string;
    /**
     * @generated from protobuf field: optional string original_language = 4
     */
    originalLanguage?: string;
    /**
     * @generated from protobuf field: optional string poster_path = 5
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: optional string overview = 6
     */
    overview?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvResult
 */
export interface TmdbTvResult {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional string title = 2
     */
    title?: string;
    /**
     * @generated from protobuf field: repeated string origin_country = 3
     */
    originCountry: string[];
    /**
     * @generated from protobuf field: optional string original_language = 4
     */
    originalLanguage?: string;
    /**
     * @generated from protobuf field: optional string overview = 5
     */
    overview?: string;
    /**
     * @generated from protobuf field: optional string poster_path = 6
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: optional string first_air_date = 7
     */
    firstAirDate?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbGenre
 */
export interface TmdbGenre {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbProductionCompany
 */
export interface TmdbProductionCompany {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional string logo_path = 2
     */
    logoPath?: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: optional string origin_country = 4
     */
    originCountry?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbProductionCountry
 */
export interface TmdbProductionCountry {
    /**
     * @generated from protobuf field: string iso_3166_1 = 1
     */
    iso31661: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbSpokenLanguage
 */
export interface TmdbSpokenLanguage {
    /**
     * @generated from protobuf field: string iso_639_1 = 1
     */
    iso6391: string;
    /**
     * @generated from protobuf field: string english_name = 2
     */
    englishName: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbMovieDetails
 */
export interface TmdbMovieDetails {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: uint32 imdb_id = 2
     */
    imdbId: number;
    /**
     * @generated from protobuf field: optional string title = 3
     */
    title?: string;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbGenre genres = 4
     */
    genres: TmdbGenre[];
    /**
     * @generated from protobuf field: optional string poster_path = 5
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: optional string release_date = 6
     */
    releaseDate?: string;
    /**
     * @generated from protobuf field: optional string overview = 7
     */
    overview?: string;
    /**
     * @generated from protobuf field: uint32 runtime = 8
     */
    runtime: number;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvCreator
 */
export interface TmdbTvCreator {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string credit_id = 2
     */
    creditId: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: optional string profile_path = 4
     */
    profilePath?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvNetwork
 */
export interface TmdbTvNetwork {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: optional string logo_path = 2
     */
    logoPath?: string;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: optional string origin_country = 4
     */
    originCountry?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvSeason
 */
export interface TmdbTvSeason {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: uint32 season_number = 2
     */
    seasonNumber: number;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: optional string air_date = 4
     */
    airDate?: string;
    /**
     * @generated from protobuf field: optional string poster_path = 5
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: uint32 episode_count = 6
     */
    episodeCount: number;
    /**
     * @generated from protobuf field: optional string overview = 7
     */
    overview?: string;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvSeriesDetails
 */
export interface TmdbTvSeriesDetails {
    /**
     * @generated from protobuf field: int32 id = 1
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: optional string poster_path = 3
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: optional string type = 4
     */
    type?: string;
    /**
     * @generated from protobuf field: optional string status = 5
     */
    status?: string;
    /**
     * @generated from protobuf field: optional string first_air_date = 6
     */
    firstAirDate?: string;
    /**
     * @generated from protobuf field: uint32 number_of_episodes = 7
     */
    numberOfEpisodes: number;
    /**
     * @generated from protobuf field: uint32 number_of_seasons = 8
     */
    numberOfSeasons: number;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbTvCreator created_by = 9
     */
    createdBy: TmdbTvCreator[];
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbGenre genres = 10
     */
    genres: TmdbGenre[];
    /**
     * @generated from protobuf field: bool in_production = 11
     */
    inProduction: boolean;
    /**
     * @generated from protobuf field: repeated string languages = 12
     */
    languages: string[];
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbTvNetwork networks = 13
     */
    networks: TmdbTvNetwork[];
    /**
     * @generated from protobuf field: repeated string origin_country = 14
     */
    originCountry: string[];
    /**
     * @generated from protobuf field: optional string original_language = 15
     */
    originalLanguage?: string;
    /**
     * @generated from protobuf field: optional string overview = 16
     */
    overview?: string;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbProductionCompany production_companies = 17
     */
    productionCompanies: TmdbProductionCompany[];
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbProductionCountry production_countries = 18
     */
    productionCountries: TmdbProductionCountry[];
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbSpokenLanguage spoken_languages = 19
     */
    spokenLanguages: TmdbSpokenLanguage[];
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbTvSeason seasons = 20
     */
    seasons: TmdbTvSeason[];
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvSeasonDetails
 */
export interface TmdbTvSeasonDetails {
    /**
     * @generated from protobuf field: optional string air_date = 1
     */
    airDate?: string;
    /**
     * @generated from protobuf field: repeated mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails episodes = 2
     */
    episodes: TmdbTvEpisodeDetails[];
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: optional string overview = 4
     */
    overview?: string;
    /**
     * @generated from protobuf field: int32 id = 5
     */
    id: number;
    /**
     * @generated from protobuf field: optional string poster_path = 6
     */
    posterPath?: string;
    /**
     * @generated from protobuf field: uint32 season_number = 7
     */
    seasonNumber: number;
}
/**
 * @generated from protobuf message mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails
 */
export interface TmdbTvEpisodeDetails {
    /**
     * @generated from protobuf field: optional string air_date = 1
     */
    airDate?: string;
    /**
     * @generated from protobuf field: uint32 episode_number = 2
     */
    episodeNumber: number;
    /**
     * @generated from protobuf field: int32 id = 3
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 4
     */
    name: string;
    /**
     * @generated from protobuf field: optional string overview = 5
     */
    overview?: string;
    /**
     * @generated from protobuf field: optional uint32 runtime = 6
     */
    runtime?: number;
    /**
     * @generated from protobuf field: uint32 season_number = 7
     */
    seasonNumber: number;
    /**
     * @generated from protobuf field: int32 show_id = 8
     */
    showId: number;
    /**
     * @generated from protobuf field: optional string still_path = 9
     */
    stillPath?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class TmdbAnyTitle$Type extends MessageType<TmdbAnyTitle> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbAnyTitle", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "backdrop_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbAnyTitle>): TmdbAnyTitle {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.type = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbAnyTitle>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbAnyTitle): TmdbAnyTitle {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string type */ 2:
                    message.type = reader.string();
                    break;
                case /* optional string title */ 3:
                    message.title = reader.string();
                    break;
                case /* optional string backdrop_path */ 4:
                    message.backdropPath = reader.string();
                    break;
                case /* optional string poster_path */ 5:
                    message.posterPath = reader.string();
                    break;
                case /* optional string overview */ 6:
                    message.overview = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbAnyTitle, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string type = 2; */
        if (message.type !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.type);
        /* optional string title = 3; */
        if (message.title !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* optional string backdrop_path = 4; */
        if (message.backdropPath !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.backdropPath);
        /* optional string poster_path = 5; */
        if (message.posterPath !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.posterPath);
        /* optional string overview = 6; */
        if (message.overview !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.overview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbAnyTitle
 */
export const TmdbAnyTitle = new TmdbAnyTitle$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbMovieResult$Type extends MessageType<TmdbMovieResult> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbMovieResult", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "release_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "original_language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbMovieResult>): TmdbMovieResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        if (value !== undefined)
            reflectionMergePartial<TmdbMovieResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbMovieResult): TmdbMovieResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string title */ 2:
                    message.title = reader.string();
                    break;
                case /* optional string release_date */ 3:
                    message.releaseDate = reader.string();
                    break;
                case /* optional string original_language */ 4:
                    message.originalLanguage = reader.string();
                    break;
                case /* optional string poster_path */ 5:
                    message.posterPath = reader.string();
                    break;
                case /* optional string overview */ 6:
                    message.overview = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbMovieResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string title = 2; */
        if (message.title !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* optional string release_date = 3; */
        if (message.releaseDate !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.releaseDate);
        /* optional string original_language = 4; */
        if (message.originalLanguage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.originalLanguage);
        /* optional string poster_path = 5; */
        if (message.posterPath !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.posterPath);
        /* optional string overview = 6; */
        if (message.overview !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.overview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbMovieResult
 */
export const TmdbMovieResult = new TmdbMovieResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvResult$Type extends MessageType<TmdbTvResult> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvResult", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "origin_country", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "original_language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "first_air_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvResult>): TmdbTvResult {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.originCountry = [];
        if (value !== undefined)
            reflectionMergePartial<TmdbTvResult>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvResult): TmdbTvResult {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string title */ 2:
                    message.title = reader.string();
                    break;
                case /* repeated string origin_country */ 3:
                    message.originCountry.push(reader.string());
                    break;
                case /* optional string original_language */ 4:
                    message.originalLanguage = reader.string();
                    break;
                case /* optional string overview */ 5:
                    message.overview = reader.string();
                    break;
                case /* optional string poster_path */ 6:
                    message.posterPath = reader.string();
                    break;
                case /* optional string first_air_date */ 7:
                    message.firstAirDate = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string title = 2; */
        if (message.title !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.title);
        /* repeated string origin_country = 3; */
        for (let i = 0; i < message.originCountry.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.originCountry[i]);
        /* optional string original_language = 4; */
        if (message.originalLanguage !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.originalLanguage);
        /* optional string overview = 5; */
        if (message.overview !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.overview);
        /* optional string poster_path = 6; */
        if (message.posterPath !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.posterPath);
        /* optional string first_air_date = 7; */
        if (message.firstAirDate !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.firstAirDate);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvResult
 */
export const TmdbTvResult = new TmdbTvResult$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbGenre$Type extends MessageType<TmdbGenre> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbGenre", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbGenre>): TmdbGenre {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbGenre>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbGenre): TmdbGenre {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbGenre, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbGenre
 */
export const TmdbGenre = new TmdbGenre$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbProductionCompany$Type extends MessageType<TmdbProductionCompany> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbProductionCompany", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "logo_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin_country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbProductionCompany>): TmdbProductionCompany {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbProductionCompany>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbProductionCompany): TmdbProductionCompany {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string logo_path */ 2:
                    message.logoPath = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string origin_country */ 4:
                    message.originCountry = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbProductionCompany, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string logo_path = 2; */
        if (message.logoPath !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.logoPath);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string origin_country = 4; */
        if (message.originCountry !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.originCountry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbProductionCompany
 */
export const TmdbProductionCompany = new TmdbProductionCompany$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbProductionCountry$Type extends MessageType<TmdbProductionCountry> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbProductionCountry", [
            { no: 1, name: "iso_3166_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbProductionCountry>): TmdbProductionCountry {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iso31661 = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbProductionCountry>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbProductionCountry): TmdbProductionCountry {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iso_3166_1 */ 1:
                    message.iso31661 = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbProductionCountry, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iso_3166_1 = 1; */
        if (message.iso31661 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iso31661);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbProductionCountry
 */
export const TmdbProductionCountry = new TmdbProductionCountry$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbSpokenLanguage$Type extends MessageType<TmdbSpokenLanguage> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbSpokenLanguage", [
            { no: 1, name: "iso_639_1", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "english_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbSpokenLanguage>): TmdbSpokenLanguage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.iso6391 = "";
        message.englishName = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbSpokenLanguage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbSpokenLanguage): TmdbSpokenLanguage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string iso_639_1 */ 1:
                    message.iso6391 = reader.string();
                    break;
                case /* string english_name */ 2:
                    message.englishName = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbSpokenLanguage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string iso_639_1 = 1; */
        if (message.iso6391 !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.iso6391);
        /* string english_name = 2; */
        if (message.englishName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.englishName);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbSpokenLanguage
 */
export const TmdbSpokenLanguage = new TmdbSpokenLanguage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbMovieDetails$Type extends MessageType<TmdbMovieDetails> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbMovieDetails", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "imdb_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "title", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "genres", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbGenre },
            { no: 5, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "release_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "runtime", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbMovieDetails>): TmdbMovieDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.imdbId = 0;
        message.genres = [];
        message.runtime = 0;
        if (value !== undefined)
            reflectionMergePartial<TmdbMovieDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbMovieDetails): TmdbMovieDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* uint32 imdb_id */ 2:
                    message.imdbId = reader.uint32();
                    break;
                case /* optional string title */ 3:
                    message.title = reader.string();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbGenre genres */ 4:
                    message.genres.push(TmdbGenre.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string poster_path */ 5:
                    message.posterPath = reader.string();
                    break;
                case /* optional string release_date */ 6:
                    message.releaseDate = reader.string();
                    break;
                case /* optional string overview */ 7:
                    message.overview = reader.string();
                    break;
                case /* uint32 runtime */ 8:
                    message.runtime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbMovieDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* uint32 imdb_id = 2; */
        if (message.imdbId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.imdbId);
        /* optional string title = 3; */
        if (message.title !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.title);
        /* repeated mediacorral.common.tmdb.v1.TmdbGenre genres = 4; */
        for (let i = 0; i < message.genres.length; i++)
            TmdbGenre.internalBinaryWrite(message.genres[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional string poster_path = 5; */
        if (message.posterPath !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.posterPath);
        /* optional string release_date = 6; */
        if (message.releaseDate !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.releaseDate);
        /* optional string overview = 7; */
        if (message.overview !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.overview);
        /* uint32 runtime = 8; */
        if (message.runtime !== 0)
            writer.tag(8, WireType.Varint).uint32(message.runtime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbMovieDetails
 */
export const TmdbMovieDetails = new TmdbMovieDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvCreator$Type extends MessageType<TmdbTvCreator> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvCreator", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "credit_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "profile_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvCreator>): TmdbTvCreator {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.creditId = "";
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbTvCreator>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvCreator): TmdbTvCreator {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string credit_id */ 2:
                    message.creditId = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string profile_path */ 4:
                    message.profilePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvCreator, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string credit_id = 2; */
        if (message.creditId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.creditId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string profile_path = 4; */
        if (message.profilePath !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.profilePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvCreator
 */
export const TmdbTvCreator = new TmdbTvCreator$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvNetwork$Type extends MessageType<TmdbTvNetwork> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvNetwork", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "logo_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "origin_country", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvNetwork>): TmdbTvNetwork {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<TmdbTvNetwork>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvNetwork): TmdbTvNetwork {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* optional string logo_path */ 2:
                    message.logoPath = reader.string();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string origin_country */ 4:
                    message.originCountry = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvNetwork, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* optional string logo_path = 2; */
        if (message.logoPath !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.logoPath);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string origin_country = 4; */
        if (message.originCountry !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.originCountry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvNetwork
 */
export const TmdbTvNetwork = new TmdbTvNetwork$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvSeason$Type extends MessageType<TmdbTvSeason> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvSeason", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "season_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "air_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "episode_count", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvSeason>): TmdbTvSeason {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.seasonNumber = 0;
        message.name = "";
        message.episodeCount = 0;
        if (value !== undefined)
            reflectionMergePartial<TmdbTvSeason>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvSeason): TmdbTvSeason {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* uint32 season_number */ 2:
                    message.seasonNumber = reader.uint32();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string air_date */ 4:
                    message.airDate = reader.string();
                    break;
                case /* optional string poster_path */ 5:
                    message.posterPath = reader.string();
                    break;
                case /* uint32 episode_count */ 6:
                    message.episodeCount = reader.uint32();
                    break;
                case /* optional string overview */ 7:
                    message.overview = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvSeason, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* uint32 season_number = 2; */
        if (message.seasonNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.seasonNumber);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string air_date = 4; */
        if (message.airDate !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.airDate);
        /* optional string poster_path = 5; */
        if (message.posterPath !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.posterPath);
        /* uint32 episode_count = 6; */
        if (message.episodeCount !== 0)
            writer.tag(6, WireType.Varint).uint32(message.episodeCount);
        /* optional string overview = 7; */
        if (message.overview !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.overview);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvSeason
 */
export const TmdbTvSeason = new TmdbTvSeason$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvSeriesDetails$Type extends MessageType<TmdbTvSeriesDetails> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvSeriesDetails", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "status", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "first_air_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "number_of_episodes", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "number_of_seasons", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "created_by", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbTvCreator },
            { no: 10, name: "genres", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbGenre },
            { no: 11, name: "in_production", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "languages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "networks", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbTvNetwork },
            { no: 14, name: "origin_country", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "original_language", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 17, name: "production_companies", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbProductionCompany },
            { no: 18, name: "production_countries", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbProductionCountry },
            { no: 19, name: "spoken_languages", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbSpokenLanguage },
            { no: 20, name: "seasons", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbTvSeason }
        ]);
    }
    create(value?: PartialMessage<TmdbTvSeriesDetails>): TmdbTvSeriesDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0;
        message.name = "";
        message.numberOfEpisodes = 0;
        message.numberOfSeasons = 0;
        message.createdBy = [];
        message.genres = [];
        message.inProduction = false;
        message.languages = [];
        message.networks = [];
        message.originCountry = [];
        message.productionCompanies = [];
        message.productionCountries = [];
        message.spokenLanguages = [];
        message.seasons = [];
        if (value !== undefined)
            reflectionMergePartial<TmdbTvSeriesDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvSeriesDetails): TmdbTvSeriesDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* optional string poster_path */ 3:
                    message.posterPath = reader.string();
                    break;
                case /* optional string type */ 4:
                    message.type = reader.string();
                    break;
                case /* optional string status */ 5:
                    message.status = reader.string();
                    break;
                case /* optional string first_air_date */ 6:
                    message.firstAirDate = reader.string();
                    break;
                case /* uint32 number_of_episodes */ 7:
                    message.numberOfEpisodes = reader.uint32();
                    break;
                case /* uint32 number_of_seasons */ 8:
                    message.numberOfSeasons = reader.uint32();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbTvCreator created_by */ 9:
                    message.createdBy.push(TmdbTvCreator.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbGenre genres */ 10:
                    message.genres.push(TmdbGenre.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool in_production */ 11:
                    message.inProduction = reader.bool();
                    break;
                case /* repeated string languages */ 12:
                    message.languages.push(reader.string());
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbTvNetwork networks */ 13:
                    message.networks.push(TmdbTvNetwork.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated string origin_country */ 14:
                    message.originCountry.push(reader.string());
                    break;
                case /* optional string original_language */ 15:
                    message.originalLanguage = reader.string();
                    break;
                case /* optional string overview */ 16:
                    message.overview = reader.string();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbProductionCompany production_companies */ 17:
                    message.productionCompanies.push(TmdbProductionCompany.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbProductionCountry production_countries */ 18:
                    message.productionCountries.push(TmdbProductionCountry.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbSpokenLanguage spoken_languages */ 19:
                    message.spokenLanguages.push(TmdbSpokenLanguage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbTvSeason seasons */ 20:
                    message.seasons.push(TmdbTvSeason.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvSeriesDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string poster_path = 3; */
        if (message.posterPath !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.posterPath);
        /* optional string type = 4; */
        if (message.type !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* optional string status = 5; */
        if (message.status !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.status);
        /* optional string first_air_date = 6; */
        if (message.firstAirDate !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.firstAirDate);
        /* uint32 number_of_episodes = 7; */
        if (message.numberOfEpisodes !== 0)
            writer.tag(7, WireType.Varint).uint32(message.numberOfEpisodes);
        /* uint32 number_of_seasons = 8; */
        if (message.numberOfSeasons !== 0)
            writer.tag(8, WireType.Varint).uint32(message.numberOfSeasons);
        /* repeated mediacorral.common.tmdb.v1.TmdbTvCreator created_by = 9; */
        for (let i = 0; i < message.createdBy.length; i++)
            TmdbTvCreator.internalBinaryWrite(message.createdBy[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.common.tmdb.v1.TmdbGenre genres = 10; */
        for (let i = 0; i < message.genres.length; i++)
            TmdbGenre.internalBinaryWrite(message.genres[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* bool in_production = 11; */
        if (message.inProduction !== false)
            writer.tag(11, WireType.Varint).bool(message.inProduction);
        /* repeated string languages = 12; */
        for (let i = 0; i < message.languages.length; i++)
            writer.tag(12, WireType.LengthDelimited).string(message.languages[i]);
        /* repeated mediacorral.common.tmdb.v1.TmdbTvNetwork networks = 13; */
        for (let i = 0; i < message.networks.length; i++)
            TmdbTvNetwork.internalBinaryWrite(message.networks[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated string origin_country = 14; */
        for (let i = 0; i < message.originCountry.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.originCountry[i]);
        /* optional string original_language = 15; */
        if (message.originalLanguage !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.originalLanguage);
        /* optional string overview = 16; */
        if (message.overview !== undefined)
            writer.tag(16, WireType.LengthDelimited).string(message.overview);
        /* repeated mediacorral.common.tmdb.v1.TmdbProductionCompany production_companies = 17; */
        for (let i = 0; i < message.productionCompanies.length; i++)
            TmdbProductionCompany.internalBinaryWrite(message.productionCompanies[i], writer.tag(17, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.common.tmdb.v1.TmdbProductionCountry production_countries = 18; */
        for (let i = 0; i < message.productionCountries.length; i++)
            TmdbProductionCountry.internalBinaryWrite(message.productionCountries[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.common.tmdb.v1.TmdbSpokenLanguage spoken_languages = 19; */
        for (let i = 0; i < message.spokenLanguages.length; i++)
            TmdbSpokenLanguage.internalBinaryWrite(message.spokenLanguages[i], writer.tag(19, WireType.LengthDelimited).fork(), options).join();
        /* repeated mediacorral.common.tmdb.v1.TmdbTvSeason seasons = 20; */
        for (let i = 0; i < message.seasons.length; i++)
            TmdbTvSeason.internalBinaryWrite(message.seasons[i], writer.tag(20, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvSeriesDetails
 */
export const TmdbTvSeriesDetails = new TmdbTvSeriesDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvSeasonDetails$Type extends MessageType<TmdbTvSeasonDetails> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvSeasonDetails", [
            { no: 1, name: "air_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "episodes", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TmdbTvEpisodeDetails },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "poster_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "season_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvSeasonDetails>): TmdbTvSeasonDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.episodes = [];
        message.name = "";
        message.id = 0;
        message.seasonNumber = 0;
        if (value !== undefined)
            reflectionMergePartial<TmdbTvSeasonDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvSeasonDetails): TmdbTvSeasonDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string air_date */ 1:
                    message.airDate = reader.string();
                    break;
                case /* repeated mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails episodes */ 2:
                    message.episodes.push(TmdbTvEpisodeDetails.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* optional string overview */ 4:
                    message.overview = reader.string();
                    break;
                case /* int32 id */ 5:
                    message.id = reader.int32();
                    break;
                case /* optional string poster_path */ 6:
                    message.posterPath = reader.string();
                    break;
                case /* uint32 season_number */ 7:
                    message.seasonNumber = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvSeasonDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string air_date = 1; */
        if (message.airDate !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.airDate);
        /* repeated mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails episodes = 2; */
        for (let i = 0; i < message.episodes.length; i++)
            TmdbTvEpisodeDetails.internalBinaryWrite(message.episodes[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* optional string overview = 4; */
        if (message.overview !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.overview);
        /* int32 id = 5; */
        if (message.id !== 0)
            writer.tag(5, WireType.Varint).int32(message.id);
        /* optional string poster_path = 6; */
        if (message.posterPath !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.posterPath);
        /* uint32 season_number = 7; */
        if (message.seasonNumber !== 0)
            writer.tag(7, WireType.Varint).uint32(message.seasonNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvSeasonDetails
 */
export const TmdbTvSeasonDetails = new TmdbTvSeasonDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TmdbTvEpisodeDetails$Type extends MessageType<TmdbTvEpisodeDetails> {
    constructor() {
        super("mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails", [
            { no: 1, name: "air_date", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "episode_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "overview", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "runtime", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "season_number", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "show_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "still_path", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TmdbTvEpisodeDetails>): TmdbTvEpisodeDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.episodeNumber = 0;
        message.id = 0;
        message.name = "";
        message.seasonNumber = 0;
        message.showId = 0;
        if (value !== undefined)
            reflectionMergePartial<TmdbTvEpisodeDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TmdbTvEpisodeDetails): TmdbTvEpisodeDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string air_date */ 1:
                    message.airDate = reader.string();
                    break;
                case /* uint32 episode_number */ 2:
                    message.episodeNumber = reader.uint32();
                    break;
                case /* int32 id */ 3:
                    message.id = reader.int32();
                    break;
                case /* string name */ 4:
                    message.name = reader.string();
                    break;
                case /* optional string overview */ 5:
                    message.overview = reader.string();
                    break;
                case /* optional uint32 runtime */ 6:
                    message.runtime = reader.uint32();
                    break;
                case /* uint32 season_number */ 7:
                    message.seasonNumber = reader.uint32();
                    break;
                case /* int32 show_id */ 8:
                    message.showId = reader.int32();
                    break;
                case /* optional string still_path */ 9:
                    message.stillPath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TmdbTvEpisodeDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string air_date = 1; */
        if (message.airDate !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.airDate);
        /* uint32 episode_number = 2; */
        if (message.episodeNumber !== 0)
            writer.tag(2, WireType.Varint).uint32(message.episodeNumber);
        /* int32 id = 3; */
        if (message.id !== 0)
            writer.tag(3, WireType.Varint).int32(message.id);
        /* string name = 4; */
        if (message.name !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* optional string overview = 5; */
        if (message.overview !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.overview);
        /* optional uint32 runtime = 6; */
        if (message.runtime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.runtime);
        /* uint32 season_number = 7; */
        if (message.seasonNumber !== 0)
            writer.tag(7, WireType.Varint).uint32(message.seasonNumber);
        /* int32 show_id = 8; */
        if (message.showId !== 0)
            writer.tag(8, WireType.Varint).int32(message.showId);
        /* optional string still_path = 9; */
        if (message.stillPath !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.stillPath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message mediacorral.common.tmdb.v1.TmdbTvEpisodeDetails
 */
export const TmdbTvEpisodeDetails = new TmdbTvEpisodeDetails$Type();
