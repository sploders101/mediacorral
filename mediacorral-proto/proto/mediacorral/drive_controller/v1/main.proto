syntax = "proto3";
package mediacorral.drive_controller.v1;

service DriveControllerService {
  // Gets the number of drives registered with this controller.
  // Drive IDs are a contiguous sequence starting from 0, going up to
  // (but not including) the result of this function.
  rpc GetDriveCount(GetDriveCountRequest) returns (GetDriveCountResponse);

  // Get metadata about the drive
  rpc GetDriveMeta(GetDriveMetaRequest) returns (GetDriveMetaResponse);

  // Ejects the disc in the drive
  rpc Eject (EjectRequest) returns (EjectResponse);

  // Retracts the disc in the drive
  rpc Retract (RetractRequest) returns (RetractResponse);

  // Gets the current state of the drive
  rpc GetDriveState (GetDriveStateRequest) returns (DriveState);

  // Rips the media in the drive. Returns immediately. Status changes
  // come through the FollowRipJob stream.
  rpc RipMedia (RipMediaRequest) returns (RipMediaResponse);

  // Requests the current status of a job
  rpc GetJobStatus (GetJobStatusRequest) returns (RipStatus);

  // Creates a stream of RipUpdate responses, useful for monitoring the
  // real-time status of a job
  rpc WatchRipJob (WatchRipJobRequest) returns (stream RipUpdate);

  // Reap the job, deleting it from the in-memory cache.
  // This is meant to be called by the server after uploading relevant
  // details to the database.
  rpc ReapJob (ReapJobRequest) returns (ReapJobResponse);
}

message EjectRequest {
  uint32 drive_id = 1;
}

message RetractRequest {
  uint32 drive_id = 1;
}

message GetDriveStateRequest {
  uint32 drive_id = 1;
}

message GetJobStatusRequest {
  int64 job_id = 1; 
}

message WatchRipJobRequest {
  int64 job_id = 1;
}

message GetDriveCountRequest {}

message EjectResponse {}

message RetractResponse {}

message RipMediaResponse {}

message GetDriveMetaRequest {
  uint32 drive_id = 1;
}

message GetDriveCountResponse {
  uint32 drive_count = 1;
}

// Metadata about the drive.
message GetDriveMetaResponse {
  // The ID of the drive
  uint32 drive_id = 1;
  // The human-readable name for the drive
  string name = 2;
}

message ReapJobRequest {
  int64 job_id = 1;
}

message ReapJobResponse {}

enum DriveStatusTag {
  DRIVE_STATUS_TAG_UNSPECIFIED = 0;
  DRIVE_STATUS_TAG_EMPTY = 1;
  DRIVE_STATUS_TAG_TRAY_OPEN = 2;
  DRIVE_STATUS_TAG_NOT_READY = 3;
  DRIVE_STATUS_TAG_DISC_LOADED = 4;
}

message CommandError {
  uint64 code = 1;
}

enum JobStatus {
  JOB_STATUS_UNSPECIFIED = 0;
  JOB_STATUS_RUNNING = 1;
  JOB_STATUS_COMPLETED = 2;
  JOB_STATUS_ERROR = 3;
}

// The current status of the rip job
message RipStatus {
  // The ID for this rip job (used in the database)
  int64 job_id = 1;
  // The status of the job (active/completed/error)
  JobStatus status = 2;
  // The "Current Item" progress title
  string cprog_title = 3;
  // The "Total" progress title
  string tprog_title = 4;
  // The "Total" progress value
  Progress progress = 5;
  // Text logs from the job
  repeated string logs = 6;
}

// Represents the current state of the drive
message DriveState {
  // The ID of the drive
  uint32 drive_id = 1;
  // Status enumeration
  DriveStatusTag status = 2;
  // The name of the disc in the drive (if any)
  optional string disc_name = 3;
  // The status of an ongoing rip job
  optional int64 active_rip_job = 5;
}

// A request to rip media
message RipMediaRequest {
  // The ID for the rip job (used in the database)
  int64 job_id = 1;
  // The ID of the drive to start a rip job for
  uint32 drive_id = 2;
  // Whether to automatically eject the drive when the rip job is complete
  bool autoeject = 3;
}

// Represents progress as a fraction
message Progress {
  uint64 cprog_value = 1;
  uint64 tprog_value = 2;
  uint64 max_value = 3;
}

// An update to the progress of a rip job
message RipUpdate {
  oneof rip_update {
    // A status update
    JobStatus status = 1;
    // The "Current Item" progress title
    string cprog_title = 2;
    // The "Total" progress title
    string tprog_title = 3;
    // Progress values
    Progress progress_values = 4;
    // Log message
    string log_message = 5;
  }
}
